\input texinfo   @c -*-texinfo-*-
@setfilename zile.info
@settitle The Zile Manual

@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c @finalout
@end iftex

@setchapternewpage odd

@titlepage
@title The Zile Manual
@subtitle for Zile version 2.1
@subtitle January 2005
@author Sandro Sigala and Reuben Thomas

@dircategory Text editors
@direntry
* Zile: (zile).                 Zile emacs clone text editor.
@end direntry

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1997-2004 Sandro Sigala
Copyright @copyright{} 2003-2005 Reuben Thomas
Copyright @copyright{} 2004 David A. Capello
@end titlepage

@c ---------------------------------------------------------------------------
@node Top, Overview, (dir), (dir)

This is the @emph{Zile} manual.

Zile is another Emacs-clone.
Zile is a customizable, self-documenting real-time display editor.
Zile was written to be as similar as possible to Emacs; every Emacs
user should feel at home with Zile.

@menu
* Overview::                    An overview of the Zile editor.
* Features::                    The characteristics of Zile.
* Invoking Zile::               Command line options that you can give to Zile.
* Initialization file::         The ``.zile'' initialization file.
* Getting help::                How to get help in Zile.
* Key names::                   How the keys are named.
* Key bindings::                The functions associated with keys.
* Functions::                   The list of functions.
* Variables::                   The list of variables.
* Bug reports::                 How to report a bug.
@end menu

@c ---------------------------------------------------------------------------
@node Overview, Features, Top, Top
@chapter Overview

The @emph{Zile} editor is written entirely in @emph{@w{ANSI C}}.
It should run on any POSIX system. It has also been ported to @emph{EPOC}.

Zile should really appear like
Emacs, but a lot of good ideas were also taken from from other editors:
@itemize -
@item Emacs:
General look and feel, function names, function behaviors, key bindings.
@item XEmacs:
Some minor hints for look and feel.
@item Jed:
mode line.
@item ce:
Internal structure and function names.
@end itemize

@c ---------------------------------------------------------------------------
@node Features, Invoking Zile, Overview, Top
@chapter Features

@itemize -
@item Small but fast and powerful.
It is very useful for small footprint installations (e.g. on floppy disk)
or quick editing sessions.
@item 8-bit clean.
Zile can operate with binary files.
@item Looks like @emph{Emacs}.
Most Zile key sequences and function names are identical to Emacs ones.
@item Multi buffer editing with multi level undo.
Zile can open an infinite number of files and can record an infinite
sequence of undo operations (limited only by the amount of free memory).
@item Multi window.
Zile can display multiple windows on the screen.
@item Killing, yanking and registers.
The killing, yanking and register features of Emacs are available
in Zile.
@item Minibuffer completion.
This works for @kbd{M-x} commands and for file names.
@item Auto fill (word wrap).
Zile automatically breaks the lines when they become too wide (if the
@i{Auto Fill Mode} is enabled).
@item Auto line ending detection.
When a file is loaded, its line ending is detected automatically
according to the first end of line, either LF, CR, CRLF or LFCR.  Files with
mixed line endings will not be corrupted, but the line breaks will not be correctly
displayed.
@end itemize

@c ---------------------------------------------------------------------------
@node Invoking Zile, Initialization file, Features, Top
@chapter Invoking Zile

The options are as follows:

@table @samp
@item FILE
Edit file @file{FILE}.
@item +NUMBER
For the first file the cursor will be positioned on the line specified by
@samp{NUMBER} (do not insert a space between the @samp{+} sign and the number).
@item --batch
Run in batch mode.
@item --eval EXPR
Evaluate Lisp expression @samp{EXPR}.
@item --help
Print the command line syntax and exit.
@item --load FILE
Load Lisp file @file{FILE}.
@item -q, --no-init-file
Do not load ~/.zile.
@item --version
Print version information and exit.
@end table

@c ---------------------------------------------------------------------------
@node Initialization file, Getting help, Invoking Zile, Top
@chapter Initialization file

When Zile is started, it normally loads the @file{.zile} file in your
home directory. We call this file your ``initialization file'' because
it specifies how to initialize Zile for you. You can use the command
line switch @samp{-q} to tell Zile not to load the initialization file.

@menu
* File syntax::                 The initialization file syntax.
* Sample file::                 A sample initialization file.
@end menu

@c ---------------------------------------------------------------------------
@node File syntax, Sample file, Initialization file, Initialization file
@section File syntax

The initialization file is an ordinary Lisp file. See the Lisp manual
for more details. The file is most commonly used to initialize
variables; see the next subsection for an example.

@c ---------------------------------------------------------------------------
@node Sample file,  , File syntax, Initialization file
@section A sample file

This is the initialization file that comes with the Zile sources.

@include dotzile.texi

@c ---------------------------------------------------------------------------
@node Getting help, Key names, Initialization file, Top
@chapter Getting help

This table contains the commands that can be used during an editing
session to get help.

If you have set the @samp{alternative-bindings} variable to @samp{true},
the @kbd{M-h} key should be used instead of @kbd{C-h}.

@table @kbd
@item C-h C-d
Show informations about getting the latest version.
@item C-h F
Show the Frequently Asked Questions about Zile.
@item C-h c
Describe briefly a key sequence.
@item C-h d, C-h f
Describe a function.
@item C-h h, @key{F1}
Show this manual.
@item C-h k
Describe a key sequence.
@item C-h b
Show the defined bindings.
@item C-h l r
Show the defined registers.
@item C-h s
Show a sample configuration file.
@item C-h t
Show a tutorial window.
@item C-h v
Describe a variable.
@item C-h w
Show the key or keys to which a command is bound.
@end table

@c ---------------------------------------------------------------------------
@node Key names, Key bindings, Getting help, Top
@chapter Key names

This table contains the names of the keys that are used in Zile.

@table @key
@item SPC
Space
@item RET
Return
@item LFD
Linefeed
@item TAB
Tab
@item BS
Backspace
@item ESC
Escape
@item DEL
Delete
@item CTRL
Control
@item META
Meta (also known as @key{EDIT} or @key{ALT} on some keyboards).
@end table

In key combinations, like @kbd{M-g}, the @kbd{M-} prefix means hold the
@key{META} (or @key{EDIT} or @key{ALT}) key down while typing @kbd{g}.
The combination @kbd{C-x} means hold the @key{CTRL} key down while
typing @kbd{x}.

@c ---------------------------------------------------------------------------
@node Key bindings, Functions, Key names, Top
@chapter Key bindings

This table contains the full list of commands associated with key
sequences.

If you have set the @samp{alternative-bindings} variable to @samp{true},
the @kbd{M-h} key should be used instead of @kbd{C-h}.

At run-time, you can list the current defined bindings with the
@samp{list-bindings} command.

This section includes only a brief documentation for each command.
For full documentation, see @ref{Functions}.

@c LINT KEY
@table @kbd
@item @key{TAB}
Insert indentation.  Bound to @code{indent-command}.
@item @key{RET}
Insert a new line.  Bound to @code{newline}.
@item @key{BS}
Delete the previous character.  Bound to @code{backward-delete-char}.
@item @key{INS}
Toggle @i{Overwrite Mode}.  Bound to @code{overwrite-mode}.
@item C-@@, C-@key{SPC}, @key{F5}
Set mark.  Bound to @code{set-mark-command}.
@item C-\
Delete spaces and tabs around point.  Bound to @code{delete-horizontal-space}.
@item C-a, @key{HOME}
Go to the beginning of line.  Bound to @code{beginning-of-line}.
@item C-b, @key{LEFT}
Move cursor to the previous char.  Bound to @code{backward-char}.
@item C-d, @key{DEL}
Delete current char.  Bound to @code{delete-char}.
@item C-e, @key{END}
Go to the end of line.  Bound to @code{end-of-line}.
@item C-f, @key{RIGHT}
Move cursor to the next char.  Bound to @code{forward-char}.
@item C-g
Cancel current command.  Bound to @code{keyboard-quit}.
@item C-h F
Show the FAQ.  Bound to @code{view-zile-FAQ}.
@item C-h c
Describe briefly a key sequence.  Bound to @code{describe-key-briefly}.
@item C-h d, C-h f
Describe a function.  Bound to @code{describe-function}.
@item C-h h, @key{F1}
Show a help window.  Bound to @code{help}.
@item C-h k
Describe a key sequence.  Bound to @code{describe-key}.
@item C-h b
Show the defined bindings.  Bound to @code{list-bindings}.
@item C-h l r
Show the defined registers.  Bound to @code{list-registers}.
@item C-h s
Show a sample configuration file.  Bound to @code{help-config-sample}.
@item C-h t
Show a tutorial window.  Bound to @code{help-with-tutorial}.
@item C-h v
Describe a variable.  Bound to @code{describe-variable}.
@item C-h C-d
Show informations about getting the latest version.  Bound to @code{describe-function}.
@item C-j
Equivalent to <RET> followed by <TAB>.  Bound to @code{newline-and-indent}.
@item C-k, @key{F6}
Kill line.  Bound to @code{kill-line}.
@item C-l
Redraw display.  Bound to @code{recenter}.
@item C-n, @key{DOWN}
Move cursor to the next line.  Bound to @code{next-line}.
@item C-o
Insert a newline and leave point before it.  Bound to @code{open-line}.
@item C-p, @key{UP}
Move cursor to the previous line.  Bound to @code{previous-line}.
@item C-q
Read next input character and insert it.  Bound to @code{quoted-insert}.
@item C-r
Incrementally search backward.  Bound to @code{isearch-backward}.
@item C-s
Incrementally search forward.  Bound to @code{isearch-forward}.
@item C-t
Transpose two characters.  Bound to @code{transpose-chars}.
@item C-u
Begin a numeric argument for the following command.  Bound to @code{universal-argument}.
@item C-v, @key{PGDN}
Scroll up one screen page.  Bound to @code{scroll-up}.
@item C-w, @key{F7}
Kill region.  Bound to @code{kill-region}.
@item C-x (
Start recording keyboard macro.  Bound to @code{start-kbd-macro}.
@item C-x )
End recording keyboard macro.  Bound to @code{end-kbd-macro}.
@item C-x 0
Delete the current window.  Bound to @code{delete-window}.
@item C-x 1
Delete the other open windows.  Bound to @code{delete-other-windows}.
@item C-x 2
Split current window.  Bound to @code{split-window}.
@item C-x ^
Enlarge current window.  Bound to @code{enlarge-window}.
@item C-x b
Switch to a buffer.  Bound to @code{switch-to-buffer}.
@item C-x e, @key{F12}
Execute the last recorded keyboard macro.  Bound to @code{call-last-kbd-macro}.
@item C-x f
Set the fill column.  Bound to @code{set-fill-column}.
@item C-x h
Mark whole buffer.  Bound to @code{mark-whole-buffer}.
@item C-x i
Insert the contents of a file.  Bound to @code{insert-file}.
@item C-x k
Kill current buffer.  Bound to @code{kill-buffer}.
@item C-x o
Select the other window.  Bound to @code{other-window}.
@item C-x r i
Insert register.  Bound to @code{insert-register}.
@item C-x r s
Copy region to register.  Bound to @code{copy-to-register}.
@item C-x s
Save modified buffers.  Bound to @code{save-some-buffers}.
@item C-x u, C-_, @key{F4}
Undo some previous changes.  Bound to @code{undo}.
@item C-x C-o
Delete all but one of many consecutive blank lines.  Bound to @code{delete-blank-lines}.
@item C-y, @key{F8}
Yank killed text.  Bound to @code{yank}.
@item C-z, C-x C-z
Stop Zile and return to superior process.  Bound to @code{suspend-zile}.
@item C-x C-b
List buffers.  Bound to @code{list-buffers}.
@item C-x C-c
Save modified buffers and quit zile.  Bound to @code{save-buffers-kill-zile}.
@item C-x C-f, @key{F2}
Find a file for editing.  Bound to @code{find-file}.
@item C-x C-l
Convert the region to lower case.  Bound to @code{downcase-region}.
@item C-x C-q
Toggle @i{Read Only Mode}.  Bound to @code{toggle-read-only}.
@item C-x C-s, @key{F3}
Save the current buffer.  Bound to @code{save-buffer}.
@item C-x C-t
Transpose two lines.  Bound to @code{transpose-lines}.
@item C-x C-u
Convert the region to upper case.  Bound to @code{upcase-region}.
@item C-x C-v
Kill the current buffer and find a file for editing.  Bound to @code{find-alternate-file}.
@item C-x C-w
Write buffer to a file.  Bound to @code{write-file}.
@item C-x C-x
Exchange point and mark.  Bound to @code{exchange-point-and-mark}.
@item M-@key{BS}
Kill word backward.  Bound to @code{backward-kill-word}.
@item M-@key{SPC}
Delete spaces and tabs around point, leaving one space.  Bound to @code{just-one-space}.
@item M-@@
Mark the end of the next word.  Bound to @code{mark-word}.
@item M-!
Execute an external command in inferior shell.  Bound to @code{shell-command}.
@item M-|
Execute an external command on current region.  Bound to @code{shell-command-on-region}.
@item M-<
Go to the beginning of buffer.  Bound to @code{beginning-of-buffer}.
@item M->
Go to the end of buffer.  Bound to @code{end-of-buffer}.
@item M-b
Move backward until encountering the end of a word.  Bound to @code{backward-word}.
@item M-c
Capitalize the following word.  Bound to @code{capitalize-word}.
@item M-d
Kill word.  Bound to @code{kill-word}.
@item M-f
Move point forward one word.  Bound to @code{forward-word}.
@item M-g
Read line number and go there.  Bound to @code{goto-line}.
@item M-i
Insert a tab character.  Bound to @code{tab-to-tab-stop}.
@item M-l
Convert following word to lower case.  Bound to @code{downcase-word}.
@item M-m
Move point to the first non-whitespace character on this line.  Bound to @code{back-to-indentation}.
@item M-s
Shrink current window.  Bound to @code{shrink-window}.
@item M-t
Transpose two words.  Bound to @code{transpose-words}.
@item M-u
Convert following word to upper case.  Bound to @code{upcase-word}.
@item M-v, @key{PGUP}
Scroll down one screen page.  Bound to @code{scroll-down}.
@item M-w
Save the region as if killed, but don't kill it.  Bound to @code{copy-region-as-kill}.
@item M-x
Execute extended command.  Bound to @code{execute-extended-command}.
@item C-M-@@
Put mark after following expression.  Bound to @code{mark-sexp}.
@item C-M-b
Move backward over a balanced expression.  Bound to @code{backward-sexp}.
@item C-M-f
Move forward over a balanced expression.  Bound to @code{forward-sexp}.
@item C-M-k
Kill balanced expression forward.  Bound to @code{kill-sexp}.
@item C-M-r
Incrementally regexp search backward.  Bound to @code{isearch-backward-regexp}.
@item C-M-s
Incrementally regexp search forward.  Bound to @code{isearch-forward-regexp}.
@item C-M-t
Transpose two balanced expressions.  Bound to @code{transpose-sexps}.
@end table
@c LINT END KEY

@c ---------------------------------------------------------------------------
@node Functions, Variables, Key bindings, Top
@chapter Functions

This table contains the full list of available functions, that can be
called with the @kbd{M-x} key (please note that most functions have a
key binding, anyway).

At run-time, you can list the current defined functions with the
@samp{list-functions} command.

Please note that some functions may be not available depending
on the compilation options given to @samp{configure}.

@c LINT FUNC
@table @code
@item auto-fill-mode
Toggle @i{Auto Fill Mode}.
In @i{Auto Fill Mode}, inserting a space at a column beyond @samp{fill-column}
automatically breaks the line at a previous space.
@item back-to-indentation
Move point to the first non-whitespace character on this line.
@item backward-char
Move point left one character.
On attempt to pass beginning or end of buffer, stop and signal error.
@item backward-delete-char
Delete the previous character.
Join lines if the character is a newline.
@item backward-kill-word
Kill characters backward until encountering the end of a word.
With argument, do this that many times.
@item backward-sexp
Move backward across one balanced expression (sexp).
With argument, do it that many times.  Negative arg -N means
move forward across N balanced expressions.
@item backward-word
Move backward until encountering the end of a word (forward if the
argument is negative).
With argument, do this that many times.
@item beginning-of-buffer
Move point to the beginning of the buffer; leave mark at previous position.
@item beginning-of-line
Move point to beginning of current line.
@item capitalize-word
Capitalize the following word (or argument N words), moving over.
This gives the word(s) a first character in upper case and the rest
lower case.
@item call-last-kbd-macro
Call the last keyboard macro that you defined with @kbd{C-x (}.
A prefix argument serves as a repeat count.  Zero means repeat until error.
@item capitalize-word
Capitalize the following word (or argument N words), moving over.
This gives the word(s) a first character in upper case and the rest
lower case.
@item cd
Make the user specified directory become the current buffer's default
directory.
@item copy-region-as-kill
Save the region as if killed, but don't kill it.
@item copy-to-register
Copy region into the user specified register.
@item delete-blank-lines
On blank line, delete all surrounding blank lines, leaving just one.
On isolated blank line, delete that one.
On nonblank line, delete any immediately following blank lines.
@item delete-char
Delete the following character.
Join lines if the character is a newline.
@item delete-horizontal-space
Delete all spaces and tabs around point.
@item delete-other-windows
Make the selected window fill the screen.
@item just-one-space
Delete all spaces and tabs around point, leaving one space.
@item delete-region
Delete the text between point and mark.
@item delete-window
Remove the current window from the screen.
@item describe-function
Display the full documentation of a function.
@item describe-key
Display documentation of the function invoked by a key sequence.
@item describe-key-briefly
Display the name of the function invoked by a key sequence.
@item describe-variable
Display the full documentation of a variable.
@item downcase-region
Convert the region to lower case.
@item downcase-word
Convert following word (or argument N words) to lower case, moving over.
@item end-kbd-macro
Finish defining a keyboard macro.
The definition was started by @kbd{C-x (}.
The macro is now available for use via @kbd{C-x e}.
@item end-of-buffer
Move point to the end of the buffer; leave mark at previous position.
@item end-of-line
Move point to end of current line.
@item enlarge-window
Make current window one line bigger.
@item exchange-point-and-mark
Put the mark where point is now, and point where the mark is now.
@item execute-extended-command
Read function name, then read its arguments and call it.
@item find-alternate-file
Find the file specified by the user, select its buffer, kill previous buffer.
If the current buffer now contains an empty file that you just visited
(presumably by mistake), use this command to visit the file you really want.
@item find-file
Edit a file specified by the user.  Switch to a buffer visiting the file,
creating one if none already exists.
@item forward-char
Move point right one character.
On reaching end of buffer, stop and signal error.
@item forward-line
Move N lines forward (backward if N is negative).
Precisely, if point is on line I, move to the start of line I + N.
@item forward-sexp
Move forward across one balanced expression (sexp).
With argument, do it that many times.  Negative arg -N means
move backward across N balanced expressions.
@item forward-word
Move point forward one word (backward if the argument is negative).
With argument, do this that many times.
@item goto-char
Read a number N and move the cursor to character number N.
Position 1 is the beginning of the buffer.
@item goto-line
Move cursor to the beginning of the specified line.
Line 1 is the beginning of the buffer.
@item help
Show a help window.
@item help-config-sample
Show a configuration file sample.
@item view-zile-FAQ
Show the Zile @i{Frequently Asked Questions} list (FAQ).
@item help-latest-version
Show informations about getting the latest version.
@item help-tutorial
Show a tutorial window.
@item indent-command
Indent line in proper way for current major mode or insert a tab.
@item insert-buffer
Insert after point the contents of the user specified buffer.
Puts mark after the inserted text.
@item insert-file
Insert contents of the user specified file into buffer after point.
Set mark after the inserted text.
@item insert-register
Insert contents of the user specified register.
Puts point before and mark after the inserted text.
@item isearch-backward
Do incremental search backward.
With a prefix argument, do a regular expression search instead.
As you type characters, they add to the search string and are found.
Type return to exit, leaving point at location found.
Type @kbd{C-r} to search again backward, @kbd{C-s} to search again forward.
@kbd{C-g} when search is successful aborts and moves point to starting point.
@item isearch-backward-regexp
Do incremental search forward for regular expression.
With a prefix argument, do a regular string search instead.
Like ordinary incremental search except that your input
is treated as a regexp.  See @kbd{C-s} for more info.
@item isearch-forward
Do incremental search forward.
With a prefix argument, do an incremental regular expression search instead.
As you type characters, they add to the search string and are found.
Type return to exit, leaving point at location found.
Type @kbd{C-s} to search again forward, @kbd{C-r} to search again backward.
@kbd{C-g} when search is successful aborts and moves point to starting point.
@item isearch-forward-regexp
Do incremental search forward for regular expression.
With a prefix argument, do a regular string search instead.
Like ordinary incremental search except that your input
is treated as a regexp.  See @kbd{C-s} for more info.
@item keyboard-quit
Cancel current command.
@item kill-buffer
Kill the current buffer or the user specified one.
@item kill-line
Kill the rest of the current line; if no nonblanks there, kill thru newline.
@item kill-region
Kill between point and mark.
The text is deleted but saved in the kill ring.
The command @kbd{C-y} (yank) can retrieve it from there.

If the buffer is read-only, Zile will beep and refrain from deleting
the text, but put the text in the kill ring anyway.  This means that
you can use the killing commands to copy text from a read-only buffer.

If the previous command was also a kill command,
the text killed this time appends to the text killed last time
to make one entry in the kill ring.
@item kill-sexp
Kill the sexp (balanced expression) following the cursor.
With ARG, kill that many sexps after the cursor.
Negative arg -N means kill N sexps before the cursor.
@item kill-word
Kill characters forward until encountering the end of a word.
With argument, do this that many times.
@item list-bindings
List defined bindings.
@item list-buffers
Display a list of names of existing buffers.
The list is displayed in a buffer named @samp{*Buffer List*}.
Note that buffers with names starting with spaces are omitted.

@c LINT IGNORE
@itemize -
@item The @samp{M} column contains a @samp{*} for buffers that are modified.
@item The @samp{R} column contains a @samp{%} for buffers that are read-only.
@end itemize
@c LINT END IGNORE
@item list-functions
List defined functions.
@item list-registers
List defined registers.
@item mark-whole-buffer
Put point at beginning and mark at end of buffer.
@item mark-sexp
Set mark argument sexps from point.
The place mark goes is the same place @kbd{C-M-f} would
move to with the same argument.
@item mark-word
Set mark argument words away from point.
@item newline
Insert a newline at the current point position into
the current buffer.
@item newline-and-indent
Insert a newline, then indent according to major mode.
Indentation is done using the @i{indent-command} function.
@item next-line
Move cursor vertically down one line.
If there is no character in the target line exactly in the current column,
the cursor is positioned after the character in that line which spans this
column, or at the end of the line if it is not long enough.
@item open-line
Insert a newline and leave point before it.
@item other-window
Select the first different window on the screen.
All windows are arranged in a cyclic order.
This command selects the window one step away in that order.
@item overwrite-mode
In @i{Overwrite Mode}, printing characters typed in replace existing text
on a one-for-one basis, rather than pushing it to the right.  At the
end of a line, such characters extend the line.
@kbd{C-q} still inserts characters in @i{Overwrite Mode}; this
is supposed to make it easier to insert characters when necessary.
@item previous-line
Move cursor vertically up one line.
If there is no character in the target line exactly over the current column,
the cursor is positioned after the character in that line which spans this
column, or at the end of the line if it is not long enough.
@item query-replace
Replace occurrences of a string with other text.
As each match is found, the user must type a character saying
what to do with it.
@item quoted-insert
Read next input character and insert it.
This is useful for inserting control characters.
You may also type up to 3 octal digits, to insert a character with that code.
@item recenter
Center point in window and redisplay screen.
The desired position of point is always relative to the current window.
@item replace-string
Replace occurrences of a string with other text.
@item save-buffer
Save current buffer in visited file if modified. By default, makes the
previous version into a backup file if this is the first save.
@item save-buffers-kill-zile
Offer to save each buffer, then kill this Zile process.
@item save-some-buffers
Save some modified file-visiting buffers.  Asks user about each one.
@item scroll-down
Scroll text of current window downward near full screen.
@item scroll-up
Scroll text of current window upward near full screen.
@item search-backward
Search backward from point for the user specified text.
@item search-backward-regexp
Search backward from point for match for regular expression REGEXP.
@item search-forward
Search forward from point for the user specified text.
@item search-forward-regexp
Search forward from point for regular expression REGEXP.
@item self-insert-command
Insert the character you type.
@item set-fill-column
Set the fill column.
If an argument value is passed, set the @samp{fill-column} variable with
that value, otherwise with the current column value.
@item set-mark-command
Set mark at where point is.
@item set-variable
Set a variable value to the user specified value.
@item shell-command
Reads a line of text using the minibuffer and creates an inferior shell
to execute the line as a command.

Standard input from the command comes from the null device.  If the
shell command produces any output, the output goes to a Zile buffer
named @samp{*Shell Command Output*}, which is displayed in another window
but not selected.

If the output is one line, it is displayed in the echo area.
A numeric argument, as in @kbd{M-1 M-!} or @kbd{C-u M-!}, directs this
command to insert any output into the current buffer.
@item shell-command-on-region
Reads a line of text using the minibuffer and creates an inferior shell
to execute the line as a command; passes the contents of the region as
input to the shell command.

If the shell command produces any output, the output goes to a Zile buffer
named @samp{*Shell Command Output*}, which is displayed in another window
but not selected.

If the output is one line, it is displayed in the echo area.
A numeric argument, as in @kbd{M-1 M-|} or @kbd{C-u M-|}, directs output
to the current buffer,
then the old region is deleted first and the output replaces it as the
contents of the region.
@item shrink-window
Make current window one line smaller.
@item split-window
Split current window into two windows, one above the other.
Both windows display the same buffer now current.
@item start-kbd-macro
Record subsequent keyboard input, defining a keyboard macro.
The commands are recorded even as they are executed.
Use @kbd{C-x )} to finish recording and make the macro available.
@item suspend-zile
Stop Zile and return to superior process.
@item switch-to-buffer
Select to the user specified buffer in the current window.
@item tabify
Convert multiple spaces in region to tabs when possible.
A group of spaces is partially replaced by tabs
when this can be done without changing the column they end at.
The variable @samp{tab-width} controls the spacing of tab stops.
@item tab-to-tab-stop
Insert a tabulation at the current point position into
the current buffer.  Convert the tabulation into spaces
if the @samp{expand-tabs} variable is bound and set to true.
@item toggle-read-only
Change whether this buffer is visiting its file read-only.
@item transient-mark-mode
Toggle Transient Mark mode.
With arg, turn Transient Mark mode on if arg is positive, off otherwise.
@item transpose-chars
Interchange characters around point, moving forward one character.
If at end of line, the previous two chars are exchanged.
@item transpose-lines
Exchange current line and previous line, leaving point after both.
With argument ARG, takes previous line and moves it past ARG lines.
With argument 0, interchanges line point is in with line mark is in.
@item transpose-sexps
Like @kbd{M-t} but applies to sexps.
@item transpose-words
Interchange words around point, leaving point at end of them.
@item undo
Undo some previous changes.
Repeat this command to undo more changes.
@item universal-argument
Begin a numeric argument for the following command.
Digits or minus sign following @kbd{C-u} make up the numeric argument.
@kbd{C-u} following the digits or minus sign ends the argument.
@kbd{C-u} without digits or minus sign provides 4 as argument.
Repeating @kbd{C-u} without digits or minus sign multiplies the argument
by 4 each time.
@item untabify
Convert all tabs in region to multiple spaces, preserving columns.
The variable @samp{tab-width} controls the spacing of tab stops.
@item upcase-region
Convert the region to upper case.
@item upcase-word
Convert following word (or argument N words) to upper case, moving over.
@item where-is
Show the key or keys to which the given command is bound.
@item write-file
Write current buffer into the user specified file.
Makes buffer visit that file, and marks it not modified.
@item yank
Reinsert the last stretch of killed text.
More precisely, reinsert the stretch of killed text most recently
killed @i{or} yanked.  Put point at end, and set mark at beginning.
@item zile-version
Show the zile version.
@end table
@c LINT END FUNC

@c ---------------------------------------------------------------------------
@node Variables, Bug reports, Functions, Top
@chapter Variables

This table contains the full list of available variables, that can be
modified at run-time with the @samp{set-variable} function or set at start-up
in the @file{.zilerc} initialization file.

Please note that some variables may be not available depending
on the compilation options given to @samp{configure}.

@c LINT VAR
@table @code
@item alternative-bindings
Remap the help functions (bound by default to @kbd{C-h}) to @kbd{M-h}.
This may be useful when @kbd{C-h} is already bound to @key{BS}
or @key{DEL}.
Please note that changing this variable at run-time has no effect; you
need instead to modify your @file{~/.zilerc} configuration file and
restart Zile.
Default value is @samp{false}.
@item backup-directory
Specify target backup directory.  Directory must exist.
This value is used only when the @samp{backup-with-directory} value is true.
Default value is @samp{~/.backup}.
@item backup-method
Specify the file backup method.
Possible values are: @samp{none} and @samp{simple}.
@c LINT IGNORE
@table @samp
@item none
If @samp{none} is specified, Zile will not create backup files.
@item simple
If @samp{simple} is specified, Zile will create a backup file with a
tilde @samp{~} appended to the name (e.g.: on saving @file{foo.c} it will
create the backup @file{foo.c~}).
@end table
@c LINT END IGNORE
Default value is @samp{simple}.
@item backup-with-directory
If enabled Zile will backup files to a user specified directory;
the directory must exist and must be specified in the
variable @samp{backup-directory}.
Default value is @samp{false}.
@item beep
If enabled, a sound will be emitted on any error.
Default value is @samp{true}.
@item expand-tabs
If disabled, Zile will insert hard tabs (the character @samp{\t}),
otherwise it will insert spaces.
Default value is @samp{false}.
@item fill-column
The default fill column (used in @i{Auto Fill Mode}).
Default value is @samp{72}.
@item kill-whole-line
If enabled, `kill-line' with no arg at the beginning of a line kills the whole line.
Default value is @samp{false}.
@item highlight-nonselected-windows
If enabled, highlight region even in nonselected windows.  Default
value is @samp{false}.
@item skip-splash-screen
If enabled, the splash screen at startup will be avoided.
Default value is @samp{false}.
@item standard-indent
Default number of columns for margin-changing functions to
indent. Default values is @samp{4}.
@item tab-width
The default tabulation width.
Default value is @samp{8}.
@item auto-fill-mode
If enabled, the @i{Auto Fill Mode} is automatically enabled.  Default
value is @samp{false}.
@item transient-mark-mode
If enabled, deactivates the mark when the buffer contents change.
Also enables highlighting of the region whenever the mark is active.
The variable `highlight-nonselected-windows' controls whether to
highlight all windows or just the selected window.  Default value is
@samp{true}.
@end table
@c LINT END VAR

@c ---------------------------------------------------------------------------
@node Bug reports,  , Variables, Top
@chapter Bug reports

Any questions, comments, or bug reports should be sent to the
developers at @email{zile-devel@@lists.sourceforge.net}, or even better,
filed in the relevant tracker at @uref{http://sourceforge.net/projects/zile/}.

@contents

@bye

Local Variables:
compile-command: "texi2dvi zile.texi"
End:
