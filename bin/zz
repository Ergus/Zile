#!/bin/sh
SH=--[[                                             # -*- mode: lua; -*-
##
## Program initialisation
## Written by Reuben Thomas, 2010
##
## Copyright (c) 2010-2014 Free Software Foundation, Inc.
##
## This file is part of GNU Zile.
##
## This program is free software; you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3, or (at your option)
## any later version.
##
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

_lua_version_re='"Lua 5.2"'
_lua_binaries='lua5.2 lua52 lua'

export LUA_INIT
export LUA_INIT_5_2
export LUA_PATH
export LUA_CPATH

# Be Bourne compatible
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
fi

# If LUA is not set, search PATH for something suitable.
test -n "$LUA" || {
  # Check that the supplied binary is executable and returns a compatible
  # Lua version number.
  func_vercheck ()
  {
    test -x "$1" && {
      eval 'case `'$1' -e "print (_VERSION)" 2>/dev/null` in
        '"$_lua_version_re"') LUA='$1' ;;
      esac'
    }
  }

  progname=`echo "$0" |${SED-sed} 's|.*/||'`

  save_IFS="$IFS"
  LUA=
  for x in $_lua_binaries; do
    IFS=:
    for dir in $PATH; do
      IFS="$save_IFS"
      func_vercheck "$dir/$x"
      test -n "$LUA" && break
    done
    IFS="$save_IFS"
    test -n "$LUA" && break
    e="${e+$e\n}$progname: command not found on PATH: $x"
  done
}

test -n "$LUA" || {
  printf "${e+$e\n}$progname: retry after 'export LUA=/path/to/lua52'\n" >&2
  exit 1
}


LUA_INIT=
LUA_INIT_5_2=
test -d '@datadir@' && LUA_PATH='@datadir@/?.lua;'${LUA_PATH-;}


# Reexecute using the interpreter suppiled in LUA, or found above.
exec "$LUA" "$0" "$@"
]]SH

-- Remove current directory from package search path
package.path = package.path:gsub (";%./%?.lua;", ";")
package.path = package.path:gsub ("^%./%?.lua;", "")
package.path = package.path:gsub (";%./%?.lua$", "")

-- Load external modules:
require "std" -- load std
require_version ("std", "37") -- check version of std now we have require_version
require "std.strict" -- optional stdlib module
posix      = require_version ("posix", "29")
curses     = require "curses" -- part of luaposix
rex_gnu    = require_version ("rex_gnu", "2.7.1", nil, "[%S]+%s*([%S]+)")

-- Load modules with Zile callbacks first:
eval = require "zz.eval"

-- Load Zile modules:
require "zile.lib"
require "zile.astr"
require "zile.estr"
require "zile.history"
require "zile.bind"
require "zile.buffer"
require "zile.completion"
require "zile.editfns"
require "zile.funcs"
require "zile.getkey"
require "zile.file"
require "zile.keycode"
require "zile.killring"
require "zile.line"
require "zile.macro"
require "zile.marker"
require "zile.minibuf"
require "zile.redisplay"
require "zile.search"
require "zile.undo"
require "zile.window"

-- Zile terminal handling
require "zile.term_curses"
require "zile.term_minibuf"
require "zile.term_redisplay"

-- Zz modules:
require "zz.callbacks"
require "zz.commands"
require "zz.keymaps"
require "zz.main"


local function err (err)
  term_close ()
  print ("Internal error.  Please report this bug with steps to reproduce the problem")
  print (debug.traceback(err, 2))
  os.exit (2)
end

xpcall (main, err)
