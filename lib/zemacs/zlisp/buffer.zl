;; Buffer-oriented commands.
;;
;; Copyright (c) 2010-2014 Free Software Foundation, Inc.
;;
;; This file is part of GNU Zile.
;;
;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.


(defsubr point ()
  "Return value of point, as an integer.
Beginning of buffer is position (point-min)."
    "return get_buffer_pt (cur_bp)")


(defsubr point-max ()
  "Return the maximum permissible value of point in the current buffer.
This is (1+ (buffer-size))."
    "return get_buffer_size (cur_bp) + 1")


(defsubr point-min ()
  "Return the minimum permissible value of point in the current buffer.
This is 1."
    "return 1")


(defsubr kill-buffer (&optional buffer)
  "Kill buffer BUFFER.
With a nil argument, kill the current buffer."
  (interactive)
    "local ok = true

    if not buffer then
      local cp = make_buffer_completion ()
      buffer = minibuf_read (string.format ('Kill buffer (default %s): ', cur_bp.name),
                             '', cp, buffer_name_history)
      if not buffer then
        ok = keyboard_quit ()
      end
    end

    local bp
    if buffer and buffer ~= '' then
      bp = get_buffer (buffer)
      if not bp then
        minibuf_error (string.format ([[Buffer `%s' not found]], buffer))
        ok = false
      end
    else
      bp = cur_bp
    end

    if ok then
      if not check_modified_buffer (bp) then
        ok = false
      else
        kill_buffer (bp)
      end
    end

    return ok")


(defsubr set-buffer (buffer)
  "Make buffer BUFFER current for editing operations.
BUFFER must be the name of an existing buffer.
This function does not display the buffer, so its effect ends when the
current command terminates.  Use `switch-to-buffer` to switch buffers
permanently."
    "local bp
    if buffer and buffer ~= '' then
      bp = get_buffer (buffer)
    end
    if bp then
      push_buffer (bp)
    end
    return bp ~= nil")


(defsubr switch-to-buffer (buffer)
  "Display buffer BUFFER in the selected window."
  (interactive)
    "local ok = true
    local bp = buffer_next (cur_bp)

    if not buffer then
      local cp = make_buffer_completion ()
      buffer = minibuf_read (string.format ('Switch to buffer (default %s): ', bp.name),
                             '', cp, buffer_name_history)

      if not buffer then
        ok = keyboard_quit ()
      end
    end

    if ok then
      if buffer and buffer ~= '' then
        bp = get_buffer (buffer)
        if not bp then
          bp = buffer_new ()
          bp.name = buffer
          bp.needname = true
          bp.nosave = true
        end
      end

      switch_to_buffer (bp)
    end

    return ok")


(defsubr toggle-read-only ()
  "Change whether this buffer is visiting its file read-only."
  (interactive)
    "cur_bp.readonly = not cur_bp.readonly")


(defvar auto-fill-mode nil
  "If non-nil, Auto Fill Mode is automatically enabled.")


(defsubr auto-fill-mode ()
  "Toggle Auto Fill mode.
In Auto Fill mode, inserting a space at a column beyond `fill-column'
automatically breaks the line at a previous space."
  (interactive)
    "cur_bp.autofill = not cur_bp.autofill")


(localfun write_buffers_list (old_wp)
  ;; FIXME: Underline next line properly.
  "insert_string ('CRM Buffer                Size  Mode             File\n')
  insert_string ('--- ------                ----  ----             ----\n')

  -- Rotate buffer list to get current buffer at head.
  local bufs = table.clone (buffers)
  for i = #buffers, 1, -1 do
    if buffers[i] == old_wp.bp then
      break
    end
    table.insert (bufs, 1, table.remove (bufs))
  end

  -- Print buffers.
  for _, bp in ripairs (bufs) do
    -- Print all buffers whose names don't start with space except
    -- this one (the *Buffer List*).
    if cur_bp ~= bp and bp.name[1] ~= ' ' then
      insert_string (string.format ('%s%s%s %-19s %6u  %-17s',
                                    old_wp.bp == bp and '.' or ' ',
                                    bp.readonly and '%' or ' ',
                                    bp.modified and '*' or ' ',
                                    bp.name, get_buffer_size (bp), 'Fundamental'))
      if bp.filename then
        insert_string (compact_path (bp.filename))
      end
      insert_string '\n'
    end
  end")


(defsubr list-buffers ()
  "Display a list of names of existing buffers.
The list is displayed in a buffer named `*Buffer List*'.

The C column has a `.' for the buffer from which you came.
The R column has a `%' if the buffer is read-only.
The M column has a `*' if it is modified.
After this come the buffer name, its size in characters,
its major mode, and the visited file name (if any)."
  (interactive)
    "write_temp_buffer ('*Buffer List*', true, write_buffers_list, cur_wp)")


(defsubr buffer-size (&optional buffer)
  "Return the number of characters in the current buffer.
if BUFFER, return the number of characters in that buffer instead."
    "local ok = true
    local bp = cur_bp

    if buffer and buffer ~= '' then
      bp = get_buffer (buffer)
      if not bp then
        return nil
      end
    end

    return get_buffer_size (bp)")
