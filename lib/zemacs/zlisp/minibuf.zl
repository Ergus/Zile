;; Minibuf commands.
;;
;; Copyright (c) 2010-2014 Free Software Foundation, Inc.
;;
;; This file is part of GNU Zile.
;;
;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.


(defvar message-log-max 1000
  "Maximum number of lines to keep in the message log buffer.
If nil, disable message logging.  If t, log messages but don't truncate
the buffer when it becomes large.")


(localvar prototype "require 'std.object'.prototype")


(defsubr message (format-string &rest args)
  "Display a message at the bottom of the screen.

The message also goes into the `*Messages*' buffer, if `message-log-max'
is non-nil.

Return the message.

In batch mode, the message is printed to the standard error stream,
followed by a newline.

The first argument is a format control string, and the rest are data
to be formatted under control of the string.

Note: Use (message '%s' VALUE) to print the value of expressions and
variables to avoid accidentally interpreting `%' as format specifiers.

If the first argument is nil or the empty string, the function clears
any existing message."
    "local t = {...}
    for i, v in ipairs (t) do
      -- Convert internal representations back to ZLisp write syntax:
      if prototype (v) == 'Symbol' then
        t[i] = v.name
      elseif v == true then
        t[i] = 't'
      elseif v == false then
        t[i] = 'nil'
      end
    end
    return minibuf_out (io.stderr, string.format (format_string, unpack (t)))")
