;; Line-oriented editing commands.
;;
;; Copyright (c) 2010-2014 Free Software Foundation, Inc.
;;
;; This file is part of GNU Zile.
;;
;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to the
;; Free Software Foundation, Fifth Floor, 51 Franklin Street, Boston,
;; MA 02111-1301, USA.


(defvar indent-tabs-mode t
  "If non-nil, insert-tab inserts 'real' TABs; otherwise, it always inserts
spaces.")
(make-variable-buffer-local 'indent-tabs-mode)


(defvar tab-always-indent t
  "Controls the operation of the @kbd{TAB} key.
If @samp{t}, hitting TAB always just indents the current line.
If @samp{nil}, hitting TAB indents the current line if point is at the
left margin or in the line's indentation, otherwise it inserts a
'real' TAB character.")


(defvar tab-width 8
  "Distance between tab stops (for display of tab characters), in columns.")
(make-variable-buffer-local 'tab-width)


(defvar standard-indent 4
  "Default number of columns for margin-changing functions to indent.")


(defsubr indent-for-tab-command ()
  "Indent line or insert a tab.
Depending on `tab-always-indent', either insert a tab or indent.
If initial point was within line's indentation, position after
the indentation.  Else stay at same point in text."
  (interactive)
    "if lisp.get_variable ('tab-always-indent') then
      return insert_tab ()
    elseif (get_goalc () < previous_line_indent ()) then
      return lisp.execute_function ('indent-relative')
    end")


(defsubr indent-relative ()
  "Space out to under next indent point in previous nonblank line.
An indent point is a non-whitespace character following whitespace.
The following line shows the indentation points in this line.
    ^         ^    ^     ^   ^           ^      ^  ^    ^
If the previous nonblank line has no indent points beyond the
column point starts at, `tab-to-tab-stop' is done instead, unless
this command is invoked with a numeric argument, in which case it
does nothing."
  (interactive)
    "local target_goalc = 0
    local cur_goalc = get_goalc ()
    local t = tab_width (cur_bp)
    local ok = false

    if warn_if_readonly_buffer () then
      return false
    end

    deactivate_mark ()

    -- If we're on the first line, set target to 0.
    if get_buffer_line_o (cur_bp) == 0 then
      target_goalc = 0
    else
      -- Find goalc in previous non-blank line.
      local m = point_marker ()

      previous_nonblank_goalc ()

      -- Now find the next blank char.
      if preceding_char () ~= '\t' or get_goalc () <= cur_goalc then
        while not eolp () and not following_char ():match ('%s') do
          move_char (1)
        end
      end

      -- Find next non-blank char.
      while not eolp () and following_char ():match ('%s') do
        move_char (1)
      end

      -- Target column.
      if not eolp () then
        target_goalc = get_goalc ()
      end
      goto_offset (m.o)
      unchain_marker (m)
    end

    -- Insert indentation.
    undo_start_sequence ()
    if target_goalc > 0 then
      -- If not at EOL on target line, insert spaces & tabs up to
      -- target_goalc; if already at EOL on target line, insert a tab.
      cur_goalc = get_goalc ()
      if cur_goalc < target_goalc then
        repeat
          if cur_goalc % t == 0 and cur_goalc + t <= target_goalc then
            ok = insert_tab ()
          else
            ok = insert_char (' ')
          end
          cur_goalc = get_goalc ()
        until not ok or cur_goalc >= target_goalc
      else
        ok = insert_tab ()
      end
    else
      ok = insert_tab ()
    end
    undo_end_sequence ()

    return ok")


(defsubr newline-and-indent ()
  "Insert a newline, then indent.
Indentation is done using the `indent-for-tab-command' function."
  (interactive)
    "local ok = false

    if warn_if_readonly_buffer () then
      return false
    end

    deactivate_mark ()

    undo_start_sequence ()
    if insert_string '\n' then
      local m = point_marker ()
      local pos

      -- Check where last non-blank goalc is.
      previous_nonblank_goalc ()
      pos = get_goalc ()
      local indent = pos > 0 or (not eolp () and following_char ():match ('%s'))
      goto_offset (m.o)
      unchain_marker (m)
      -- Only indent if we're in column > 0 or we're in column 0 and
      -- there is a space character there in the last non-blank line.
      if indent then
        lisp.execute_function ('indent-for-tab-command')
      end
      ok = true
    end
    undo_end_sequence ()

    return ok")



(defsubr delete-char (n)
  "Delete the following N characters (previous if N is negative)."
  (interactive)
    "return execute_with_uniarg (true, n, delete_char, backward_delete_char)")


(defsubr backward-delete-char (n)
  "Delete the previous N characters (following if N is negative)."
  (interactive)
    "return execute_with_uniarg (true, n, backward_delete_char, delete_char)")


(defsubr delete-horizontal-space ()
  "Delete all spaces and tabs around point."
  (interactive)
  "return delete_horizontal_space ()")


(defsubr just-one-space ()
  "Delete all spaces and tabs around point, leaving one space."
  (interactive)
    "undo_start_sequence ()
    delete_horizontal_space ()
    insert_char (' ')
    undo_end_sequence ()")


(defsubr tab-to-tab-stop (&optional arg)
  "Insert a tabulation at the current point position into the current
buffer."
  (interactive)
    "return execute_with_uniarg (true, arg, insert_tab)")


(defvar fill-column 70
  "Column beyond which automatic line-wrapping should happen.
Automatically becomes buffer-local when set in any fashion.")
(make-variable-buffer-local 'fill-column)


(localfun newline ()
  "if cur_bp.autofill and
     get_goalc () > lisp.get_variable ('fill-column')
  then
    fill_break_line ()
  end
  return insert_string '\n'")


(defsubr newline (&optional arg)
  "Insert a newline at the current point position into
the current buffer.
With ARG insert that many newlines."
  (interactive)
    "return execute_with_uniarg (true, arg, newline)")


(defsubr open-line (n)
  "Insert a newline and leave point before it.
with arg N, insert N newlines."
  (interactive)
    "return execute_with_uniarg (true, n, intercalate_newline)")


(defsubr insert (arg)
  "Insert the argument at point."
    "insert_string (arg)")
