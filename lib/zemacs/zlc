#!/usr/bin/env lua
--
-- Zemacs command generator.
--
-- Copyright (c) 2013-2014 Free Software Foundation, Inc.
--
-- This file is part of GNU Zile.
--
-- This program is free software; you can redistribute it and/or modify it
-- under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3, or (at your option)
-- any later version.
--
-- This program is distributed in the hope that it will be useful, but
-- WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-- General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

local case   = require "std.functional".case
local io     = require "std.io"

local zz   = require "zile.zlisp"
local prog = require "zile.version"

local Cons, call_command, consp, eval_file, intern =
      zz.Cons, zz.call_command, zz.consp, zz.eval_file, zz.intern



--[[ ======================== ]]--
--[[ Symbol Table Management. ]]--
--[[ ======================== ]]--


--- Make a new symbol and intern to `symtab`.
-- Overwrites any previous definition of symbol `name` in `symtab`.
-- @string name symbol name
-- @param[opt=nil] value value to store in new symbol
-- @tparam[opt=obarray] table symtab symbol table into which new symbol is
--   interned
-- @treturn zile.Symbol newly initialised symbol.
local function define (name, value, symtab)
  local symbol = intern (name, symtab)
  symbol.value = value
  return symbol
end



--[[ ======================= ]]--
--[[ ZLisp Command Handlers. ]]--
--[[ ======================= ]]--


local function writef (...) io.write (string.format (...)) end


-- (defvar NAME INITVALUE [DOCSTRING])
-- A special form for describing Zemacs variables.  Each time it is called
-- by Zlisp, output a lua variable declaration for loading into Zemacs.
define ("defvar",
  function (arglist)
    local initvalue = arglist:nth (2)

    if type (initvalue) == "string" then
      initvalue = '"' .. initvalue .. '"'
    elseif type (initvalue) == "table" and initvalue.name == "t" then
      initvalue = "true"
    end

    writef ('\n\ndefvar ("%s", %s,\n[[\n%s\n]])\n',
            arglist:nth (1).name, tostring (initvalue),
	    arglist:nth (3) or "")
  end
)


-- (make-variable-buffer-local NAME)
-- Declare that NAME will maintain separate values for each buffer in
-- which it is set.
define ("make-variable-buffer-local",
  function (arglist)
    writef ('lisp.set_variable_buffer_local ("%s", true)\n', arglist:nth (1).name)
  end
)


-- Return true if SYMBOL is a valid parameter name.
local function isname (symbol)
  return symbol.name == "..." or symbol.name:match "^[%w_]" ~= nil
end


-- Parse argument specification into minimum and maximum argument
-- counts.
local function argspec (paramlist, min, max, kw)
  min, max = min or 0, max or 0
  if not consp (paramlist) then return min, max end

  local param = paramlist.car
  if param.name == "..." then
    return min, '"UNEVAL"'
  elseif param.name == "&rest" then
    return min, '"MANY"'
  elseif param.name == "&optional" then
    kw = param.name
  else
    max = max + 1
    if not kw then min = min + 1 end
  end

  return argspec (paramlist.cdr, min, max, kw)
end


-- (defsubr NAME ([PARAM]...) DOCSTRING [(interactive)] "BODY")
-- A special form for describing Zemacs commands.  Each time it is called
-- by Zlisp, output a lua command declaration for binding into Zemacs.
define ("defsubr",
  function (arglist)
    local name      = arglist:nth (1).name
    local paramlist = arglist:nth (2)
    local body      = arglist:nth (4) -- or 5, if interactive present

    local mkargs = function ()
      local min, max = argspec (paramlist)
      return string.format ('"%s", %s, %s,',
                            name, tostring (min), tostring (max))
    end

    local mkdocstring = function ()
      local docstring = arglist:nth (3)
      if consp (paramlist) and docstring:match "^%(" == nil then
        -- Add a function signature unless docstring has one already.
        local signature = paramlist:mapconcat (function (symbol)
          return isname (symbol) and symbol.name:upper () or symbol.name
        end, " ")
        signature = table.concat ({name, signature}, " ")
        docstring = "(" .. signature .. ")\n\n" .. docstring
      end
      return string.format ("[[\n%s\n]],", docstring)
    end

    local mkinteractive = function ()
      local interactive = "false"
      local collectargs
      if consp (body) and body.car.name == "interactive" then
	if body.cdr then
          -- interactive ARGS specifier
          local param = paramlist
	  body.cdr.car:gsub ("(%S)([^\n]+)",
            function (code, prompt)
	      local readfn
              if consp (param) and isname (param.car) then
                typefn, readfn = case (code, {
		  N = function () return "integerp", "minibuf_read_number" end,

		      function (s)
		        return error (name .. ': unknown interactive type code "' .. s .. '"')
		      end,
	        })
	      else
		return error (name .. ': interactive parameter parse error "' .. body.cdr.car .. '"')
              end
	      if collectargs == nil then
                collectargs = "local __ok__ = true\n"
              end
	      collectargs = collectargs ..
	                    "    if not " .. param.car.name .. " then\n" ..
	                    "      " .. param.car.name .. " = " .. readfn .. " ('" .. prompt .. "')\n" ..
		            "    end\n" ..
			    "    if not " .. typefn .. " (" .. param.car.name .. ") then\n" ..
			    "      __ok__ = " ..
			    string.format ([[minibuf_error ('%s: wrong-type-argument %s "' .. tostring (%s) .. '"')]], name, typefn, param.car.name) .. "\n" ..
			    "    end\n" ..
			    "    "
	      param = paramlist.cdr
	    end
	  )
	end
	if collectargs then
	  body = collectargs .. "if __ok__ then\n    " .. arglist:nth (5) .. "\n    end"
	else
          body = arglist:nth (5)
	end
        interactive = "true"
      end
      return string.format ("%s,", interactive)
    end

    local mkparams = function ()
      local params
      if consp (paramlist) then
        params = paramlist:filter (isname)
      end
      if params and params.car then
        params = params:mapconcat (function (symbol)
                                     return symbol.name:gsub ("[^%w%d%.]", "_")
                                   end, ", ")
      else
        params = ""
      end
      return string.format ("function (%s)", params)
    end

    local mkbody = function ()
      return string.format ("  %s\n  end", body)
    end

    io.write ("\n\n" ..
      "defsubr (" .. mkargs () .. "\n" ..
      mkdocstring () .. "\n" ..
      "  " .. mkinteractive () .. "\n" ..
      "  " .. mkparams () .. "\n" ..
      "  " .. mkbody () .. ")\n")
  end
)


-- (localfun NAME (PARAM...) [DOCSTRING] "IMPLEMENTATION")
define ("localfun",
  function (arglist)
    local params = arglist:nth (2)
    local impl = arglist:nth (3)

    if params and params.car then
      params = params:mapconcat (
                 function (symbol) return symbol.name end, ", ")
    else
      params = ""
    end

    io.write ("\n\n")
    if arglist:nth (4) ~= nil then
      io.write ("-- " .. impl:gsub ("\n", "\n-- ") .. "\n")
      impl = arglist:nth (4)
    end

    writef ("local function %s (%s)\n  %s\nend\n",
            arglist:nth (1).name, params, impl)
  end
)


-- (localvar NAME [DOCSTRING] "INITIAL-VALUE")
define ("localvar",
  function (arglist)
    local init = arglist:nth (2)

    io.write ("\n\n")
    if arglist:nth (3) ~= nil then
      io.write ("-- " .. init:gsub ("\n", "\n-- ") .. "\n")
      init = arglist:nth (3)
    end

    writef ("local %s = %s\n", arglist:nth (1).name, tostring (init))
  end
)



--[[ =============== ]]--
--[[ Option Parsing. ]]--
--[[ =============== ]]--

local OptionParser = require "std.optparse"

local parser = OptionParser ([[
zlc (GNU Zile) ]] .. prog.VERSION .. "\n" .. [[
Written by Gary V. Vaughan <gary@gnu.org>, 2013

Copyright (C) 2013, Free Software Foundation, Inc.
Zile comes with ABSOLUTELY NO WARRANTY.
You may redistribute copies of Specl under the terms of the GNU
General Public Licens; either version 3, or any later version.
For more information, see <http://gnu.org/licenses>.

Usage: zlc FILE...

Compile Zlisp subr declarations into Lua source code.

      --help            print this help, then exit
      --version         print version number, then exit

Listed FILEs are compiled to standard output in order.

Report bugs to ]] .. prog.PACKAGE_BUGREPORT .. ".")

local arg, opts = parser:parse (_G.arg)

if #arg == 0 then
  return parser:opterr "No input files"
end


-- Preamble.
io.writelines ('-- Generated by ' .. prog.name .. '.',
  '-- ' .. prog.COPYRIGHT_STRING,
  '',
  'local lisp = require "zemacs.eval"',
  'local defsubr, defvar = lisp.defsubr, lisp.defvar',
  '',
  'local function integerp (x)',
  '  return type (x) == "number" and tostring (x):match "^%d+$"',
  'end'
  )


-- Treat remaining arguments as filenames to be evaluated by Zlisp.
for i = 1, #arg do
  local ok, errmsg = eval_file (arg[i])
  if not ok then
    errmsg = errmsg or "unknown error"
    io.stderr:write (arg[i] .. ": " .. errmsg .. ".\n")
    os.exit (1)
  end
end
