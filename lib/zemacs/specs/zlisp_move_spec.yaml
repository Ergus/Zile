before:
  content = "a buffer\nstring with\nseveral lines of\ntext"


specify zlisp/move:
- describe beginning-of-line:
  - context in batch mode:
    - before:
        zemacs = Zemacs {"--batch"}

    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(beginning-of-line "six")]]).
            to_contain_error 'beginning-of-line: wrong-type-argument integerp "six"'
      - it moves point to the beginning of the current line:
          lisp = [[(insert "start ") (beginning-of-line) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "^start a buffer\n"
      - it returns nil: |
          expect (zemacs:edit [[(eval-expression "(beginning-of-line)")]]).
            to_contain_output "nil\n"
      - it accepts a line count argument:
          expect (zemacs:edit ([[(beginning-of-line 3) (insert "^")]], content)).
            to_write_to_buffer "^several lines of\n"
      - it moves to the beginning of current line with 1-valued argument:
          lisp = [[(end-of-buffer) (beginning-of-line 1) (insert "^")]]
          expect (zemacs:edit (lisp, content)).to_match_buffer "\n%^text$"
      - it moves to the end of a non-empty line at the end:
          expect (zemacs:edit ([[(beginning-of-line 2) (insert "^")]], "non-empty line")).
            to_write_to_buffer "non-empty line^"
      - it moves point backward with a non-positive line count: |
          lisp = [[(end-of-buffer) (beginning-of-line %d) (insert "^")]]
          lines = {}
          content:gsub ("([^\n]+)", function (line) lines[#lines + 1] = line end)
          for n = 1, #lines - 1 do
            expect (zemacs:edit (string.format (lisp, 1 - n), content)).
              to_write_to_buffer ("^" .. lines[#lines - n] .. "\n")
          end

  - context in interactive mode:
    - before:
        zemacs = Zemacs {"--no-init-file"}
    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(beginning-of-line "six")]]).
            to_write_to_minibuf 'beginning-of-line: wrong-type-argument integerp "six"'
      - it moves point to the beginning of the current line:
          lisp = [[(insert "start ") (beginning-of-line) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "^start a buffer\n"
      - it returns nil: |
          expect (zemacs:edit [[(eval-expression "(beginning-of-line)")]]).
            to_write_to_minibuf "nil\n"
      - it accepts a line count argument:
          expect (zemacs:edit ([[(beginning-of-line 3) (insert "^")]], content)).
            to_write_to_buffer "^several lines of\n"
      - it moves to the beginning of current line with 1-valued argument:
          lisp = [[(end-of-buffer) (beginning-of-line 1) (insert "^")]]
          expect (zemacs:edit (lisp, content)).to_match_buffer "\n%^text$"
      - it moves to the end of a non-empty line at the end:
          expect (zemacs:edit ([[(beginning-of-line 2) (insert "^")]], "non-empty line")).
            to_write_to_buffer "non-empty line^"
      - it moves point backward with a non-positive line count: |
          lisp = [[(end-of-buffer) (beginning-of-line %d) (insert "^")]]
          lines = {}
          content:gsub ("([^\n]+)", function (line) lines[#lines + 1] = line end)
          for n = 1, #lines - 1 do
            expect (zemacs:edit (string.format (lisp, 1 - n), content)).
              to_write_to_buffer ("^" .. lines[#lines - n] .. "\n")
          end
    - context with keystrokes:
      - it moves point to the beginning of the current line:
          expect (zemacs:edit ([[start \C-a^]], content)).
            to_write_to_buffer "^start a buffer\n"
      - it returns nil: |
          expect (zemacs:edit [[\M-:(beginning-of-line)\r]]).
            to_write_to_minibuf "nil\n"
      - it accepts a line count argument:
          expect (zemacs:edit ([[\M-3\C-a^]], content)).
            to_write_to_buffer "^several lines of\n"
      - it moves to the beginning of current line with 1-valued argument:
          expect (zemacs:edit ([[\M->\M-1\C-a^]], content)).to_match_buffer "\n%^text$"
      - it moves to the end of a non-empty line at the end:
          expect (zemacs:edit ([[\M-2\C-a^]], "non-empty line")).
            to_write_to_buffer "non-empty line^"
      - it moves point backward with a non-positive line count: |
          keys = [[\M->\M-%d\C-a^]]
          lines = {}
          content:gsub ("([^\n]+)", function (line) lines[#lines + 1] = line end)
          for n = 1, #lines - 1 do
            expect (zemacs:edit (string.format (keys, 1 - n), content)).
              to_write_to_buffer ("^" .. lines[#lines - n] .. "\n")
          end

- describe end-of-line:
  - context in batch mode:
    - before:
        zemacs = Zemacs {"--batch"}

    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(end-of-line "six")]]).
            to_contain_error 'end-of-line: wrong-type-argument integerp "six"'
      - it moves point to the end of the current line:
          lisp = [[(end-of-line) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "a buffer^\n"
      - it returns nil: |
          expect (zemacs:edit [[(eval-expression "(end-of-line)")]]).
            to_contain_output "nil\n"
      - it accepts a line count argument:
          expect (zemacs:edit ([[(end-of-line 3) (insert "^")]], content)).
            to_write_to_buffer "several lines of^\n"
      - it moves to the end of current line with 1-valued argument:
          lisp = [[(end-of-line 1) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "a buffer^\n"
      - it moves to the end of a non-empty line at the end:
          expect (zemacs:edit ([[(end-of-line 2) (insert "^")]], "non-empty line")).
            to_write_to_buffer "non-empty line^"
      - it moves point backward with a non-positive line count: |
          lisp = [[(end-of-buffer) (end-of-line %d) (insert "^")]]
          lines = {}
          content:gsub ("([^\n]+)", function (line) lines[#lines + 1] = line end)
          for n = 1, #lines - 1 do
            expect (zemacs:edit (string.format (lisp, 1 - n), content)).
              to_write_to_buffer (lines[#lines - n] .. "^\n")
          end

  - context in interactive mode:
    - before:
        zemacs = Zemacs {"--no-init-file"}
    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(end-of-line "six")]]).
            to_write_to_minibuf 'end-of-line: wrong-type-argument integerp "six"'
      - it moves point to the end of the current line:
          lisp = [[(end-of-line) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "a buffer^\n"
      - it returns nil: |
          expect (zemacs:edit [[(eval-expression "(end-of-line)")]]).
            to_write_to_minibuf "nil\n"
      - it accepts a line count argument:
          expect (zemacs:edit ([[(end-of-line 3) (insert "^")]], content)).
            to_write_to_buffer "several lines of^\n"
      - it moves to the end of current line with 1-valued argument:
          lisp = [[(end-of-line 1) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "a buffer^\n"
      - it moves to the end of a non-empty line at the end:
          expect (zemacs:edit ([[(end-of-line 2) (insert "^")]], "non-empty line")).
            to_write_to_buffer "non-empty line^"
      - it moves point backward with a non-positive line count: |
          lisp = [[(end-of-buffer) (end-of-line %d) (insert "^")]]
          lines = {}
          content:gsub ("([^\n]+)", function (line) lines[#lines + 1] = line end)
          for n = 1, #lines - 1 do
            expect (zemacs:edit (string.format (lisp, 1 - n), content)).
              to_write_to_buffer (lines[#lines - n] .. "^\n")
          end
    - context with keystrokes:
      - it moves point to the end of the current line:
          expect (zemacs:edit ([[\C-e^]], content)).
            to_write_to_buffer "a buffer^\n"
      - it returns nil: |
          expect (zemacs:edit [[\M-:(end-of-line)\r]]).
            to_write_to_minibuf "nil\n"
      - it accepts a line count argument:
          expect (zemacs:edit ([[\M-3\C-e^]], content)).
            to_write_to_buffer "several lines of^\n"
      - it moves to the end of current line with 1-valued argument:
          expect (zemacs:edit ([[\M-1\C-e^]], content)).
            to_write_to_buffer "a buffer^\n"
      - it moves to the end of a non-empty line at the end:
          expect (zemacs:edit ([[\M-2\C-e^]], "non-empty line")).
            to_write_to_buffer "non-empty line^"
      - it moves point backward with a non-positive line count: |
          keys = [[\M->\M-%d\C-e^]]
          lines = {}
          content:gsub ("([^\n]+)", function (line) lines[#lines + 1] = line end)
          for n = 1, #lines - 1 do
            expect (zemacs:edit (string.format (keys, 1 - n), content)).
              to_write_to_buffer (lines[#lines - n] .. "^\n")
          end

- describe backward-char:
  - context in batch mode:
    - before:
        zemacs = Zemacs {"--batch"}

    # Lisp context only - you can't send keystrokes in batch mode!
    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(backward-char "six")]]).
            to_contain_error 'backward-char: wrong-type-argument integerp "six"'
      - it moves point backwards one character:
          lisp = [[(end-of-line) (backward-char) (backward-delete-char)]]
          expect (zemacs:edit (lisp, "Fix a typ_o\n")).
            to_write_to_buffer "Fix a typo\n"
      - it accepts a character count argument:
          lisp = [[(end-of-line) (backward-char 6) (backward-delete-char)]]
          expect (zemacs:edit (lisp, "Fix _a typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it diagnoses backward move from start of buffer: |
          expect (zemacs:edit [[(backward-char)]]).
            to_contain_error "Beginning of buffer\n"
      - it move point forward with a negative character count:
          lisp = [[(backward-char -6) (delete-char)]]
          expect (zemacs:edit (lisp, "Fix a _typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it diagnoses forward move from end of buffer: |
          expect (zemacs:edit ([[(backward-char -3)]], "x")).
            to_contain_error "End of buffer\n"

  - context in interactive mode:
    - before:
        zemacs = Zemacs {"--no-init-file"}
    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(backward-char "six")]]).
            to_write_to_minibuf 'backward-char: wrong-type-argument integerp "six"'
      - it moves point backwards one character:
          lisp = [[(end-of-line) (backward-char) (backward-delete-char)]]
          expect (zemacs:edit (lisp, "Fix a typ_o\n")).
            to_write_to_buffer "Fix a typo\n"
      - it accepts a character count argument:
          lisp = [[(end-of-line) (backward-char 6) (backward-delete-char)]]
          expect (zemacs:edit (lisp, "Fix _a typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it diagnoses backward move from start of buffer: |
          expect (zemacs:edit [[(backward-char)]]).
            to_write_to_minibuf "Beginning of buffer"
      - it move point forward with a negative character count:
          lisp = [[(backward-char -6) (delete-char)]]
          expect (zemacs:edit (lisp, "Fix a _typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it diagnoses forward move from end of buffer: |
          expect (zemacs:edit ([[(backward-char -3)]], "x")).
            to_write_to_minibuf "End of buffer"
    - context with keystrokes:
      - it moves point backwards one character: |
          expect (zemacs:edit [[1\LEFT2\LEFT3]]).
            to_write_to_buffer "321"
      - it accepts a character count argument:
          keystrokes = [[\C-e\M-6\LEFT^]]
          expect (zemacs:edit (keystrokes, "buffer text\n")).
            to_write_to_buffer "buffe^r text\n"
      - it understands the universal argument:
          keystrokes = [[\C-e\C-u\LEFT^]]
          expect (zemacs:edit (keystrokes, "buffer text\n")).
            to_write_to_buffer "buffer ^text\n"
      - it diagnoses backward move from start of buffer: |
          expect (zemacs:edit [[\LEFT]]).
            to_write_to_minibuf "call-interactively: Beginning of buffer"
      - it move point forward with a negative character count:
          lisp = [[\ESC-6\LEFT^]]
          expect (zemacs:edit (lisp, "buffer text\n")).
            to_write_to_buffer "buffer^ text\n"
      - it diagnoses forward move from end of buffer: |
          expect (zemacs:edit ([[\M--\C-u\LEFT]], "x")).
            to_write_to_minibuf "call-interactively: End of buffer"

- describe forward-char:
  - context in batch mode:
    - before:
        zemacs = Zemacs {"--batch"}

    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(forward-char "six")]]).
            to_contain_error 'forward-char: wrong-type-argument integerp "six"'
      - it moves point forwards one character:
          lisp = [[(forward-char) (delete-char)]]
          expect (zemacs:edit (lisp, "F_ix a typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it accepts a character count argument:
          lisp = [[(forward-char 6) (delete-char)]]
          expect (zemacs:edit (lisp, "Fix a _typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it diagnoses forward move from end of buffer: |
          expect (zemacs:edit [[(end-of-buffer) (forward-char)]]).
            to_contain_error "End of buffer\n"
      - it moves point backward with a negative character count:
          lisp = [[(end-of-buffer) (forward-char -6) (delete-char)]]
          expect (zemacs:edit (lisp, "Fix a _typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it diagnoses backward move from beginning of buffer: |
          expect (zemacs:edit ([[(forward-char -3)]], "x")).
            to_contain_error "Beginning of buffer\n"

  - context in interactive mode:
    - before:
        zemacs = Zemacs {"--no-init-file"}
    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(forward-char "six")]]).
            to_write_to_minibuf 'forward-char: wrong-type-argument integerp "six"'
      - it moves point forwards one character:
          lisp = [[(forward-char) (delete-char)]]
          expect (zemacs:edit (lisp, "F_ix a typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it accepts a character count argument:
          lisp = [[(forward-char 6) (delete-char)]]
          expect (zemacs:edit (lisp, "Fix a _typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it diagnoses forward move from end of buffer: |
          expect (zemacs:edit [[(end-of-buffer) (forward-char)]]).
            to_write_to_minibuf "End of buffer"
      - it moves point backward with a negative character count:
          lisp = [[(end-of-buffer) (forward-char -6) (delete-char)]]
          expect (zemacs:edit (lisp, "Fix a _typo\n")).
            to_write_to_buffer "Fix a typo\n"
      - it diagnoses backward move from beginning of buffer: |
          expect (zemacs:edit ([[(forward-char -3)]], "x")).
            to_write_to_minibuf "Beginning of buffer"
    - context with keystrokes:
      - it moves point forwards one character: |
          expect (zemacs:edit ([[1\RIGHT2\RIGHT3]], "abc")).
            to_write_to_buffer "1a2b3c"
      - it accepts a character count argument:
          keystrokes = [[\M-6\RIGHT^]]
          expect (zemacs:edit (keystrokes, "buffer text\n")).
            to_write_to_buffer "buffer^ text\n"
      - it understands the universal argument:
          keystrokes = [[\C-u\RIGHT^]]
          expect (zemacs:edit (keystrokes, "buffer text\n")).
            to_write_to_buffer "buff^er text\n"
      - it diagnoses forward move from end of buffer: |
          expect (zemacs:edit [[\M->\C-f]]).
            to_write_to_minibuf "call-interactively: End of buffer"
      - it moves point backward with a negative character count:
          lisp = [[\C-e\M--6\RIGHT^]]
          expect (zemacs:edit (lisp, "buffer text\n")).
            to_write_to_buffer "buffe^r text\n"
      - it diagnoses backward move from beginning of buffer: |
          expect (zemacs:edit ([[\M--\C-u\RIGHT]], "x")).
            to_write_to_minibuf "call-interactively: Beginning of buffer"

- describe goto-char:
  - context in batch mode:
    - before:
        zemacs = Zemacs {"--batch"}

    - context with lisp:
      - it diagnoses missing argument: |
          pending "diagnose missing arguments"
          expect (zemacs:edit [[(goto-char)]]).
            to_contain_error 'Wrong number of arguments: goto-char, 0\n'
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(goto-char "six")]]).
            to_contain_error 'goto-char: wrong-type-argument integerp "six"\n'
      - it accepts a character offset argument:
          lisp = [[(goto-char 10) (delete-char)]]
          expect (zemacs:edit (lisp, "Fix a typ_o\n")).
            to_write_to_buffer "Fix a typo\n"
      - it returns argument value: |
          for _, o in ipairs {-999, -1, 0, 1, #content -1, #content, #content + 1, 999999} do
            expect (zemacs:edit ([[(message "result=%d" (goto-char ]] .. o.. [[))]], content)).
              to_contain_error (string.format ("result=%d\n", o))
          end
      - it rounds too small offset to start of buffer: |
          lisp = [[(goto-char -1) (delete-char)]]
          expect (zemacs:edit (lisp, "_rest of buffer\n")).
            to_write_to_buffer "rest of buffer\n"
      - it rounds too large offset to end of buffer: |
          lisp = [[(goto-char 999999) (backward-delete-char)]]
          expect (zemacs:edit (lisp, "rest of buffer\n_")).
            to_write_to_buffer "rest of buffer\n"

  - context in interactive mode:
    - before:
        zemacs = Zemacs {"--no-init-file"}
    - context with lisp:
      - it diagnoses missing argument: |
          pending "diagnose missing arguments"
          --expect (zemacs:edit [[(goto-char)]]).
          --  to_write_to_minibuf 'Wrong number of arguments: goto-char, 0\n'
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(goto-char "six")]]).
            to_write_to_minibuf 'goto-char: wrong-type-argument integerp "six"'
      - it accepts a character count argument:
          lisp = [[(goto-char 10) (delete-char)]]
          expect (zemacs:edit (lisp, "Fix a typ_o\n")).
            to_write_to_buffer "Fix a typo\n"
      - it returns argument value: |
          for _, o in ipairs {-999, -1, 0, 1, #content -1, #content, #content + 1, 999999} do
            expect (zemacs:edit ([[(message "result=%d" (goto-char ]] .. o.. [[))]], content)).
              to_write_to_minibuf (string.format ("result=%d\n", o))
          end
      - it rounds too small offset to start of buffer: |
          lisp = [[(goto-char -1) (delete-char)]]
          expect (zemacs:edit (lisp, "_rest of buffer\n")).
            to_write_to_buffer "rest of buffer\n"
      - it rounds too large offset to end of buffer: |
          lisp = [[(goto-char 999999) (backward-delete-char)]]
          expect (zemacs:edit (lisp, "rest of buffer\n_")).
            to_write_to_buffer "rest of buffer\n"
    - context with keystrokes:
      - it moves point to provided offset: |
          expect (zemacs:edit [[1\M-gc1\r2\M-gc2\r3]]).
            to_write_to_buffer "231"
      - it returns argument value: |
          for _, o in ipairs {-999, -1, 0, 1, #content -1, #content, #content + 1, 999999} do
            expect (zemacs:edit ([[(message "result=%d" (goto-char ]] .. o.. [[))]], content)).
              to_write_to_minibuf (string.format ("result=%d\n", o))
          end
      - it accepts a character count prefix argument:
          keystrokes = [[\M-6\M-gc^]]
          expect (zemacs:edit (keystrokes, "buffer text\n")).
            to_write_to_buffer "buffe^r text\n"
      - it treats the universal prefix argument as 4:
          keystrokes = [[\C-u\M-gc^]]
          expect (zemacs:edit (keystrokes, "buffer text\n")).
            to_write_to_buffer "buf^fer text\n"
      - it reads an offset from the minibuffer when invoked with no prefix:
          keystrokes = [[\M-gc10\r^]]
          expect (zemacs:edit (keystrokes, "buffer text\n")).
            to_write_to_buffer "buffer te^xt\n"
      - it rounds too small offset to start of buffer: |
          keystrokes = [[\M--1\M-gc^]]
          expect (zemacs:edit (keystrokes, "buffer text\n")).
            to_write_to_buffer "^buffer text\n"
      - it rounds too large offset to end of buffer: |
          keystrokes = [[\C-u10000\M-gc^]]
          expect (zemacs:edit (keystrokes, "buffer text")).
            to_write_to_buffer "buffer text^"

- describe goto-line:

- describe previous-line:

- describe next-line:

- describe beginning-of-buffer:

- describe end-of-buffer:

- describe scroll-down:

- describe scroll-up:

# No keystrokes, because forward-char is not bound to a key.
- describe forward-line:
  - context in batch mode:
    - before:
        zemacs = Zemacs {"--batch"}

    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(forward-line "six")]]).
            to_contain_error 'forward-line: wrong-type-argument integerp "six"'
      - it moves point forwards one line:
          expect (zemacs:edit ([[(forward-line) (insert "^")]], content)).
            to_write_to_buffer "^string with\n"
      - it moves to the end of a non-empty line at the end:
          expect (zemacs:edit ([[(forward-line) (insert "^")]], "non-empty line")).
            to_write_to_buffer "non-empty line^"
      - it returns 0 for a successful line movement: |
          expect (zemacs:edit ([[(message "remain=%d" (forward-line))]], content)).
            to_contain_error "remain=0\n"
      - it accepts a line count argument:
          expect (zemacs:edit ([[(forward-line 2) (insert "^")]], content)).
            to_write_to_buffer "^several lines of\n"
      - it moves to the beginning-of-line with zero argument:
          lisp = [[(end-of-buffer) (forward-line 0) (insert "^")]]
          expect (zemacs:edit (lisp, content)).to_match_buffer "\n%^text$"
      - it returns remainder for a partial line movement: |
          expect (zemacs:edit ([[(message "remain=%d" (forward-line 6))]], content)).
            to_contain_error "remain=2\n"
      - it moves point backward with a negative line count:
          lisp = [[(end-of-buffer) (forward-line -1) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "^several lines of\n"
          lisp = [[(end-of-buffer) (forward-line -2) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "^string with\n"
      - it returns remainder for a partial backwards line movement: |
          expect (zemacs:edit ([[(message "remain=%d" (forward-line -6))]], content)).
            to_contain_error "remain=6\n"

  - context in interactive mode:
    - before:
        zemacs = Zemacs {"--no-init-file"}
    - context with lisp:
      - it diagnoses invalid argument: |
          expect (zemacs:edit [[(forward-line "six")]]).
            to_write_to_minibuf 'forward-line: wrong-type-argument integerp "six"'
      - it moves point forwards one line:
          expect (zemacs:edit ([[(forward-line) (insert "^")]], content)).
            to_write_to_buffer "^string with\n"
      - it moves to the end of a non-empty line at the end:
          expect (zemacs:edit ([[(forward-line) (insert "^")]], "non-empty line")).
            to_write_to_buffer "non-empty line^"
      - it returns 0 for a successful line movement: |
          expect (zemacs:edit ([[(message "remain=%d" (forward-line))]], content)).
            to_write_to_minibuf "remain=0\n"
      - it accepts a line count argument:
          expect (zemacs:edit ([[(forward-line 2) (insert "^")]], content)).
            to_write_to_buffer "^several lines of\n"
      - it moves to the beginning-of-line with zero argument:
          lisp = [[(end-of-buffer) (forward-line 0) (insert "^")]]
          expect (zemacs:edit (lisp, content)).to_match_buffer "\n%^text$"
      - it returns remainder for a partial line movement: |
          expect (zemacs:edit ([[(message "remain=%d" (forward-line 6))]], content)).
            to_write_to_minibuf "remain=2\n"
      - it moves point backward with a negative line count:
          lisp = [[(end-of-buffer) (forward-line -1) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "^several lines of\n"
          lisp = [[(end-of-buffer) (forward-line -2) (insert "^")]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_buffer "^string with\n"
      - it returns remainder for a partial backwards line movement: |
          expect (zemacs:edit ([[(message "remain=%d" (forward-line -6))]], content)).
            to_write_to_minibuf "remain=6\n"

- describe backward-paragraph:

- describe forward-paragraph:

- describe backward-sexp:

- describe forward-sexp:

- describe back-to-indentation:

- describe backward-word:

- describe forward-word:
