specify zlisp/buffer:
- before:
    content = "assorted random words\nacross\nseveral\t  lines" -- auto-\n ending
    contentmax = tostring (#content + 2) .. "\n"

- describe point:
  - context in batch mode:
    - before:
        zemacs = Zemacs {"--batch"}
    # Lisp context only - you can't send keystrokes in batch mode!
    - context with lisp:
      - it has no output: |
          expect (zemacs:edit [[(point)]]).not_to_contain_output "1\n"
          expect (zemacs:edit [[(point)]]).not_to_contain_error "1\n"
      - it outputs the buffer offset for point: |
          expect (zemacs:edit [[(message "point@%d" (point))]]).
            to_contain_error "point@1\n"
          expect (zemacs:edit [[(insert "abc") (message "point@%d" (point))]]).
            to_contain_error "point@4\n"
          lisp = [[(goto-char 10) (message "point@%d" (point))]]
          expect (zemacs:edit (lisp, content)).
            to_contain_error "point@10\n"

  - context in interactive mode:
    - before:
        zemacs = Zemacs {"--no-init-file"}
    - context with lisp:
      - it has no output: |
          expect (zemacs:edit [[(point)]]).not_to_write_to_minibuf "1\n"
      - it returns the buffer offset for point: |
          expect (zemacs:edit [[(message "point@%d" (point))]]).
            to_write_to_minibuf "point@1\n"
          expect (zemacs:edit [[(insert "abc") (message "point@%d" (point))]]).
            to_write_to_minibuf "point@4\n"
          lisp = [[(goto-char 10) (message "point@%d" (point))]]
          expect (zemacs:edit (lisp, content)).to_write_to_minibuf "point@10"
    - context with keystrokes:
      - it returns the buffer offset for point: |
          expect (zemacs:edit [[\M-:(point)\r]]).
            to_write_to_minibuf "1 (#o1, #x1)\n"
          expect (zemacs:edit [[abc\M-:(point)\r)]]).
            to_write_to_minibuf "4 (#o4, #x4)\n"
          lisp = [[\M-10\M-gc\M-:(point)\r]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf "10 (#o12, #xa)"


- describe point-max:
  - context in batch mode:
    - before:
        zemacs = Zemacs {"--batch"}
    - context with lisp:
      - it has no output: |
          expect (zemacs:edit ([[(point-max)]], content)).
            not_to_contain_output (contentmax)
          expect (zemacs:edit ([[(point-max)]], content)).
            not_to_contain_error (contentmax)
      - it returns the maximum buffer offset for point: |
          expect (zemacs:edit ([[(message "point<=%d" (point-max))]], content)).
            to_contain_error ("point<=" .. contentmax)
          lisp = [[(insert "abc") (message "point<=%d" (point-max))]]
          expect (zemacs:edit (lisp, content)).
            to_contain_error (string.format ("point<=%d\n", #content + 2 + 3))
          lisp = [[(goto-char (point-max)) (message "point<=%d" (point-max))]]
          expect (zemacs:edit (lisp, content)).
            to_contain_error ("point<=" .. contentmax)

  - context in interactive mode:
    - before:
        zemacs = Zemacs {"--no-init-file"}
    - context with lisp:
      - it has no output: |
          expect (zemacs:edit [[(point-max)]], content).
            not_to_write_to_minibuf (contentmax)
      - it returns the maximum buffer offset for point: |
          expect (zemacs:edit ([[(message "point<=%d" (point-max))]], content)).
            to_write_to_minibuf ("point<=" .. contentmax)
          lisp = [[(insert "abc") (message "point<=%d" (point-max))]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf (string.format ("point<=%d\n", #content + 2 + 3))
          lisp = [[(goto-char (point-max)) (message "point<=%d" (point))]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf "point<=46\n"
      - it is not affected by the position of point:
          lisp = [[(goto-char 1) (message "point<=%d" (point-max))]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf "point<=46\n"
          lisp = [[(goto-char 22) (message "point<=%d" (point-max))]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf "point<=46\n"
          lisp = [[(goto-char (point-max)) (message "point<=%d" (point-max))]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf "point<=46\n"
    - context with keystrokes:
      - it returns the maximum buffer offset for point: |
          expect (zemacs:edit [[\M-:(point-max)\r]]).
            to_write_to_minibuf "1 (#o1, #x1)"
          expect (zemacs:edit [[abc\M-:(point-max)\r]]).
            to_write_to_minibuf "4 (#o4, #x4)"
      - it is not affected by the position of point: |
          lisp = [[\M-gc1\r\M-:(point-max)\r]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf "46 (#o56, #x2e)"
          lisp = [[\M-gc22\r\M-:(point-max)\r]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf "46 (#o56, #x2e)"


- describe point-min:
  - context in batch mode:
    - before:
        zemacs = Zemacs {"--batch"}
    - context with lisp:
      - it has no output: |
          expect (zemacs:edit [[(point-min)]]).not_to_contain_output "1\n"
          expect (zemacs:edit [[(point-min)]]).not_to_contain_error "1\n"
      - it returns the minimum buffer offset for point: |
          expect (zemacs:edit ([[(message "point>=%d" (point-min))]], content)).
            to_contain_error "point>=1\n"
          lisp = [[(insert "abc") (message "point>=%d" (point-min))]]
          expect (zemacs:edit (lisp, content)).to_contain_error "point>=1\n"
          lisp = [[(goto-char (point-min)) (message "point>=%d" (point-min))]]
          expect (zemacs:edit (lisp, content)).to_contain_error "point>=1\n"

  - context in interactive mode:
    - before:
        zemacs = Zemacs {"--no-init-file"}
    - context with lisp:
      - it has no output: |
          expect (zemacs:edit ([[(point-min)]], content)).
            not_to_write_to_minibuf "1"
      - it returns the minimum buffer offset for point: |
          expect (zemacs:edit ([[(message "point>=%d" (point-min))]], content)).
            to_write_to_minibuf "point>=1\n"
          lisp = [[(insert "abc") (message "point>=%d" (point-min))]]
          expect (zemacs:edit (lisp, content)).to_write_to_minibuf "point>=1\n"
          lisp = [[(goto-char (point-min)) (message "point>=%d" (point))]]
          expect (zemacs:edit (lisp, content)).to_write_to_minibuf "point>=1\n"
      - it is not affected by the position of point:
          lisp = [[(goto-char 1) (message "point>=%d" (point-min))]]
          expect (zemacs:edit (lisp, content)).to_write_to_minibuf "point>=1\n"
          lisp = [[(goto-char 22) (message "point>=%d" (point-min))]]
          expect (zemacs:edit (lisp, content)).to_write_to_minibuf "point>=1\n"
          lisp = [[(goto-char (point-min)) (message "point>=%d" (point-min))]]
          expect (zemacs:edit (lisp, content)).to_write_to_minibuf "point>=1\n"
    - context with keystrokes:
      - it returns the minimum buffer offset for point: |
          expect (zemacs:edit [[\M-:(point-min)\r]]).
            to_write_to_minibuf "1 (#o1, #x1)"
          expect (zemacs:edit [[abc\M-:(point-min)\r]]).
            to_write_to_minibuf "1 (#o1, #x1)"
      - it is not affected by the position of point: |
          lisp = [[\M-gc1\r\M-:(point-min)\r]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf "1 (#o1, #x1)"
          lisp = [[\M-gc22\r\M-:(point-min)\r]]
          expect (zemacs:edit (lisp, content)).
            to_write_to_minibuf "1 (#o1, #x1)"
