.Pp
The
.Fn astr_last_char
function returns the last character in the string.
.Pp
The
.Fn astr_find
and
.Fn astr_find_cstr
functions find the first occurrence of the argument string or character
into the argument
.Fa as ,
returning the position starting from the beginning of the string.
.Pp
The
.Fn astr_rfind
and
.Fn astr_rfind_cstr
functions find the first occurrence of the argument string or character
into the argument
.Fa as ,
returning the position starting from the end of the string.
.Pp
The
.Fn astr_replace ,
and
.Fn astr_replace_cstr
functions replace up to
.Fa size
characters of the argument string
.Fa as ,
starting from the position
.Fa pos ,
with the argument string or character.
.Pp
The
.Fn astr_fgets
function reads a string from the file
.Fa f
and stores it into the string
.Fa as .
The trailing newline is removed from the string.
The
.Fn astr_fgets
function returns the argument
.Fa as
string, and
.Fa NULL
when end of file occurs while no characters have been read.
.Pp
The
.Fn astr_fmt
and
.Fn astr_vfmt
functions write formatted text into the argument string
.Fa as .
Previously existing text will be overwritten.
.Pp
The
.Fn astr_afmt
and
.Fn astr_vafmt
functions append formatted text to the argument string
.Fa as .
.Pp
Where not otherwise specified, the
.Nm
functions return the first argument string, usually named
.Fa as
in the function prototype.
.Sh IMPLEMENTATION
Internally, each
.Nm
entry stores three variables: a buffer that contains
the C string, the buffer size and the size of the string.
.Pp
At each modification that enlarges the string, if the buffer is not big
enough to contain the modified string, the buffer is reallocated with
.Fa realloc .
.Sh EXAMPLES
Create and concatenate two strings:
.Bd -literal -offset indent
astr s1, s2;
s1 = astr_new();
s2 = astr_new();
astr_assign_cstr(s1, "string 1");
astr_assign_cstr(s2, "string 2");
astr_append_char(s1, ' ');
astr_append(s1, s2);
printf("s1: '%s', s2: '%s'\\n", astr_cstr(s1), astr_cstr(s2));
astr_delete(s1);
astr_delete(s2);
.Ed
.Pp
Replace occurrences into a string:
.Bd -literal -offset indent
astr s;
int i;
s = astr_new();
astr_assign_cstr(s, "buffer: this is a buffer");
while ((i = astr_find_cstr(s, "buffer")) >= 0)
	astr_replace_cstr(s, i, 6, "astr string");
printf("s: '%s'\\n", astr_cstr(s));
astr_delete(s);
.Ed
.Pp
Filtering files:
.Bd -literal -offset indent
astr s;
int i;
s = astr_new();
while (astr_fgets(s, stdin) != NULL) {
	while ((i = astr_find_cstr(s, "vi")) >= 0)
		astr_replace_cstr(s, i, 2, "emacs");
	astr_fputs(s, stdout);
	putc('\\n', stdout);
}
astr_delete(s);
.Ed
.Pp
Miscellaneous operations on strings:
.Bd -literal -offset indent
astr s;
s = astr_new();
astr_assign_cstr(s, "world");
astr_prepend_cstr(s, "hello");
astr_append_char(s, '!');
printf("s: '%s'\\n", astr_cstr(s));
astr_delete(s);
.Ed
