.Pp
Where not otherwise specified, the
.Nm
functions return the first argument string, usually named
.Fa as
in the function prototype.
.Sh IMPLEMENTATION
Internally, each
.Nm
entry stores three variables: a buffer that contains
the C string, the buffer size and the size of the string.
.Pp
At each modification that enlarges the string, if the buffer is not big
enough to contain the modified string, the buffer is reallocated with
.Fa realloc .
.Sh EXAMPLES
Create and concatenate two strings:
.Bd -literal -offset indent
astr s1, s2;
s1 = astr_new();
s2 = astr_new();
astr_assign_cstr(s1, "string 1");
astr_assign_cstr(s2, "string 2");
astr_append_char(s1, ' ');
astr_append(s1, s2);
printf("s1: '%s', s2: '%s'\\n", astr_cstr(s1), astr_cstr(s2));
astr_delete(s1);
astr_delete(s2);
.Ed
.Pp
Replace occurrences into a string:
.Bd -literal -offset indent
astr s;
int i;
s = astr_new();
astr_assign_cstr(s, "buffer: this is a buffer");
while ((i = astr_find_cstr(s, "buffer")) >= 0)
	astr_replace_cstr(s, i, 6, "astr string");
printf("s: '%s'\\n", astr_cstr(s));
astr_delete(s);
.Ed
.Pp
Filtering files:
.Bd -literal -offset indent
astr s;
int i;
s = astr_new();
while (astr_size(astr_fgets(stdin) != NULL) {
	while ((i = astr_find_cstr(s, "vi")) >= 0)
		astr_replace_cstr(s, i, 2, "emacs");
	puts(astr_cstr(s));
	putchar('\n');
        astr_delete(s);
}
.Ed
.Pp
Miscellaneous operations on strings:
.Bd -literal -offset indent
astr s;
s = astr_new();
astr_assign_cstr(s, "world");
astr_prepend_cstr(s, "hello");
astr_append_char(s, '!');
printf("s: '%s'\\n", astr_cstr(s));
astr_delete(s);
.Ed
