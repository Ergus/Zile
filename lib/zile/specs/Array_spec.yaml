before:
  Object = require "std.object"
  Array  = require "zile.Array"

  prototype = Object.prototype

specify Array:
- before:
    array = Array ("long", {1, 1})
    -- append fibonacci numbers until long word overflows
    repeat
      array:push (array[-1] + array[-2])
    until array[-1] < array[-2]
    -- discard overflowed element
    array:pop ()

- describe __call:
  - it diagnoses wrong argument types: |
      expect (Array "function").to_error "type function does not exist"
      expect (Array (1, 2)).
        to_error "bad argument #1 to 'Array' (string expected, got number)"
      expect (Array (function () end)).
        to_error "bad argument #1 to 'Array' (number, string or table expected, got function)"
      expect (Array ("int", function () end)).
        to_error "bad argument #2 to 'Array' (number or table expected, got function)"
  - context with inherited element type:
    - it constructs an empty array:
        array = Array ()
        expect (#array).to_be (0)
        expect (array.array.type).to_be (Array.array.type)
    - it constructs a sized array:
        array = Array (100)
        expect (#array).to_be (100)
        expect (array.array.type).to_be (Array.array.type)
    - it sets uninitialised elements to zero:
        array = Array (100)
        for i = 1, 100 do
          expect (array[i]).to_be (0)
        end
        expect (array.array.type).to_be (Array.array.type)
    - it initialises values from a table: |
        array = Array {1, 4, 9, 16, 25, 36, 49, 64, 81}
        expect (#array).to_be (9)
        for i = 1, #array do
          expect (array[i]).to_be (i * i)
        end
        expect (array.array.type).to_be (Array.array.type)
    - it contains values from prototype array: |
        a = array ()
        for i = 3, #array do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
        expect (a.array.type).to_be (array.array.type)
    - it truncates copied prototype values: |
        c = math.floor (#array / 2)
        a = array (c)
        expect (#a).to_be (c)
        for i = 3, #a do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
        expect (a.array.type).to_be (array.array.type)
    - it zero pads copied prototype values: |
        a = array (#array * 2)
        expect (#a).to_be (#array * 2)
        for i = 3, #array do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
        for i = #array + 1, #a do
          expect (a[i]).to_be (0)
        end
        expect (a.array.type).to_be (array.array.type)
  - context with specified element type:
    - it constructs an empty array:
        array = Array "double"
        expect (#array).to_be (0)
        expect (array.array.type).to_be "double"
    - it constructs a sized array:
        array = Array ("double", 100)
        expect (#array).to_be (100)
        expect (array.array.type).to_be "double"
    - it sets uninitialised elements to zero:
        array = Array ("double", 100)
        for i = 1, 100 do
          expect (array[i]).to_be (0)
        end
        expect (array.array.type).to_be "double"
    - it initialises values from a table: |
        array = Array ("double", {1, 4, 9, 16, 25, 36, 49, 64, 81})
        expect (#array).to_be (9)
        for i = 1, #array do
          expect (array[i]).to_be (i * i)
        end
        expect (array.array.type).to_be "double"
    - it contains values from prototype array: |
        a = array "double"
        for i = 3, #array do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
        expect (a.array.type).to_be "double"
    - it truncates copied prototype values: |
        c = math.floor (#array / 2)
        a = array ("double", c)
        expect (#a).to_be (c)
        for i = 3, #a do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
        expect (a.array.type).to_be "double"
    - it zero pads copied prototype values: |
        a = array ("double", #array * 2)
        expect (#a).to_be (#array * 2)
        for i = 3, #array do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
        for i = #array + 1, #a do
          expect (a[i]).to_be (0)
        end
        expect (a.array.type).to_be "double"

- describe __len:
  - it returns the number of elements stored:
      array = Array "char"
      expect (#array).to_be (0)
      array = Array ("short", {1, 2, 3})
      expect (#array).to_be (3)

- describe __index:
  - it returns nil for an empty array:
      array = Array "int"
      expect (array[1]).to_be (nil)
      expect (array[-1]).to_be (nil)
  - it retrieves a value stored at that index:
      expect (array[1]).to_be (1)
      expect (array[2]).to_be (1)
      expect (array[3]).to_be (2)
      expect (array[4]).to_be (3)
      expect (array[5]).to_be (5)
  - it retrieves negative indices counting from the right: |
      expect (array[-1]).to_be (array[#array])
      expect (array[-2]).to_be (array[#array - 1])
      expect (array[-(#array - 1)]).to_be (array[2])
      expect (array[-(#array)]).to_be (array[1])
  - it returns nil for out of bounds indices:
      expect (array[-(#array * 2)]).to_be (nil)
      expect (array[-(#array + 1)]).to_be (nil)
      expect (array[0]).to_be (nil)
      expect (array[#array + 1]).to_be (nil)
      expect (array[#array * 2]).to_be (nil)
  - it retrieves method names:
      expect (type (array.push)).to_be "function"
      expect (type (array.pop)).to_be "function"
  - it diagnoses undefined methods:
      expect (array.notamethod ()).to_error "attempt to call field 'notamethod'"

- describe __newindex:
  - it sets a new value at that index:
      array[2] = 2
      expect (array[2]).to_be (2)
  - it sets negative indexed elements counting from the right: |
      for i = 1, #array do array[-i] = #array - i + 1 end
      for i = 1, #array do
        expect (array[i]).to_be (i)
      end
  - it diagnoses out of bounds indices: |
      for _, i in ipairs {#array * -2, -1 - #array, 0, #array + 1, #array * 2} do
        expect ((function () array[i] = i end) ()).
          to_error "array access out of bounds"
      end

- describe __tostring:
  - it renders all elements of the array:
      array = Array ("char", {1, 4, 9, 16, 25})
      expect (tostring (array)).to_be 'Array ("char", 1, 4, 9, 16, 25)'

- describe pop:
  - context when called as a module function:
    - before:
        -- Rounding impedance mismatch between Lua double and alien long, so we
        -- use an intentionally short array for this example.
        array = Array ("short", {1, 1, 2 ,3, 5, 8, 13, 21, 34, 55, 89})
    - it diagnoses missing arguments: |
        expect (Array.pop ()).
          to_error "bad argument #1 to 'pop' (Array expected, got no value)"
    - it returns nil for an empty array:
        array = Array "char"
        expect (Array.pop (array)).to_be (nil)
    - it removes an element from the array: |
        count = #array
        repeat
          expect (#array).to_be (count)
          count = count - 1
        until Array.pop (array) == nil
        expect (#array).to_be (0)
    - it returns the removed element: |
        while #array > 2 do
          expect (Array.pop (array)).to_be (array[-1] + array[-2])
        end
    - it does not perturb existing elements: |
        Array.pop (array)
        for i = 3, #array do
          expect (array[i]).to_be (array[i -1] + array[i - 2])
        end
  - context when called as an object method:
    - before:
        -- Rounding impedance mismatch between Lua double and alien long, so we
        -- use an intentionally short array for this example.
        array = Array ("short", {1, 1, 2 ,3, 5, 8, 13, 21, 34, 55, 89})
    - it returns nil for an empty array:
        array = Array "char"
        expect (array:pop ()).to_be (nil)
    - it removes an element from the array: |
        count = #array
        repeat
          expect (#array).to_be (count)
          count = count - 1
        until array:pop () == nil
        expect (#array).to_be (0)
    - it returns the removed element: |
        while #array > 2 do
          expect (array:pop ()).to_be (array[-1] + array[-2])
        end
    - it does not perturb existing elements: |
        array:pop ()
        for i = 3, #array do
          expect (array[i]).to_be (array[i -1] + array[i - 2])
        end

- describe push:
  - context when called as a module function:
    - before:
        -- Rounding impedance mismatch between Lua double and alien long, so we
        -- use an intentionally short array for this example.
        array = Array ("short", {1, 1, 2 ,3, 5, 8, 13, 21, 34, 55, 89})
    - it diagnoses missing arguments: |
        expect (Array.push ()).
          to_error "bad argument #1 to 'push' (Array expected, got no value)"
        expect (Array.push (array)).
          to_error "bad argument #2 to 'push' (number expected, got no value)"
    - it diagnoses wrong argument types: |
        expect (Array.push (1234)).
          to_error "bad argument #1 to 'push' (Array expected, got number)"
        expect (Array.push (array, "short")).
          to_error "bad argument #2 to 'push' (number expected, got string)"
    - it adds a single element to an empty array:
        array = Array "int"
        Array.push (array, 42)
        expect (array[1]).to_be (array[-1])
    - it adds an element to an array: |
        count = #array
        Array.push (array, 42)
        expect (array[-1]).to_be (42)
        expect (#array).to_be (count + 1)
        Array.push (array, -273)
        expect (array[-1]).to_be (-273)
        expect (#array).to_be (count + 2)
    - it does not perturb existing elements: |
        Array.push (array, 42)
        for i = 3, #array - 1 do
          expect (array[i]).to_be (array[i - 1] + array[i - 2])
        end
  - context when called as an object method:
    - before:
        -- Rounding impedance mismatch between Lua double and alien long, so we
        -- use an intentionally short array for this example.
        array = Array ("short", {1, 1, 2 ,3, 5, 8, 13, 21, 34, 55, 89})
    - it diagnoses missing arguments: |
        expect (array:push ()).
          to_error "bad argument #2 to 'push' (number expected, got no value)"
    - it diagnoses wrong argument type: |
        expect (array:push ("short")).
          to_error "bad argument #2 to 'push' (number expected, got string)"
    - it adds a single element to an empty array:
        array = Array "int"
        array:push (42)
        expect (array[1]).to_be (array[-1])
    - it adds an element to an array: |
        count = #array
        array:push (42)
        expect (array[-1]).to_be (42)
        expect (#array).to_be (count + 1)
        array:push (-273)
        expect (array[-1]).to_be (-273)
        expect (#array).to_be (count + 2)
    - it returns itself: |
        count = #array
        array:push (42):push (-273)
        expect (array[-1]).to_be (-273)
        expect (array[-2]).to_be (42)
        expect (#array).to_be (count + 2)
    - it does not perturb existing elements: |
        array:push (42)
        for i = 3, #array - 1 do
          expect (array[i]).to_be (array[i - 1] + array[i -2])
        end

- describe realloc:
  - context when called as a module function:
    - it diagnoses missing arguments: |
        expect (Array.realloc ()).
          to_error "bad argument #1 to 'realloc' (Array expected, got no value)"
        expect (Array.realloc (array)).
          to_error "bad argument #2 to 'realloc' (number expected, got no value)"
    - it diagnoses wrong argument types: |
        expect (Array.realloc (1234)).
          to_error "bad argument #1 to 'realloc' (Array expected, got number)"
        expect (Array.realloc (array, "string")).
          to_error "bad argument #2 to 'realloc' (number expected, got string)"
    - it reduces the number of usable elements: |
        array = Array (100)
        Array.realloc (array, 50)
        expect (#array).to_be (50)
        expect (array.array.length >= 50).to_be (true)
    - it truncates existing elements when reducing size: |
        a = array (100)
        Array.realloc (a, 50)
        for i = 3, #a do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
    - it increases the number of usable elements: |
        array = Array (50)
        Array.realloc (array, 100)
        expect (#array).to_be (100)
        expect (array.array.length >= 100).to_be (true)
    - it does not perturb existing element values: |
        a = array (50)
        Array.realloc (a, 100)
        for i = 3, 50 do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
    - it sets new elements to zero: |
        a = array (50)
        Array.realloc (a, 100)
        for i = 51, #a do
          expect (a[i]).to_be (0)
        end
  - context when called as an object method:
    - it diagnoses missing arguments: |
        expect (array:realloc ()).
          to_error "bad argument #2 to 'realloc' (number expected, got no value)"
    - it diagnoses wrong argument types: |
        expect (array:realloc "string").
          to_error "bad argument #2 to 'realloc' (number expected, got string)"
    - it reduces the number of usable elements: |
        array = Array (100):realloc (50)
        expect (#array).to_be (50)
        expect (array.array.length >= 50).to_be (true)
    - it truncates existing elements when reducing size: |
        a = array (100):realloc (50)
        for i = 3, #a do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
    - it increases the number of usable elements: |
        array = Array (50):realloc (100)
        expect (#array).to_be (100)
        expect (array.array.length >= 100).to_be (true)
    - it does not perturb existing element values: |
        a = array (50):realloc (100)
        for i = 3, 50 do
          expect (a[i]).to_be (a[i - 1] + a[i - 2])
        end
    - it sets new elements to zero: |
        a = array (50):realloc (100)
        for i = 51, #a do
          expect (a[i]).to_be (0)
        end
