;; Zile Lisp commands.
;;
;; Copyright (c) 2009-2014 Free Software Foundation, Inc.
;;
;; This file is part of GNU Zile.
;;
;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to the
;; Free Software Foundation, Fifth Floor, 51 Franklin Street, Boston,
;; MA 02111-1301, USA.


(defun load (string)
  "Execute a file of Lisp code named FILE."
  (interactive)
  (lambda (file)
    "if file then
      return lisp.eval_file (file)
    end"))


(defun setq ()
  "(setq [sym val]...)

Set each sym to the value of its val.
The symbols sym are variables; they are literal (not evaluated).
The values val are expressions; they are evaluated."
  (lambda (...)
    "local ret
    local l = {...}
    for i = 1, #l/2 do
      ret = lisp.eval_expression (l[i + 1])
      lisp.set_variable (l[i].value, ret.value)
    end
    return ret"))


(defun execute-extended-command (number)
  "Read function name, then read its arguments and call it."
  (interactive)
  (lambda (prefixarg)
    "local msg = ''

    if lastflag.set_uniarg then
      if lastflag.uniarg_empty then
        msg = 'C-u '
      else
        msg = string.format ('%d ', current_prefix_arg)
      end
    end
    msg = msg .. 'M-x '

    local name = minibuf_read_function_name (msg)
    local command = name and lisp.fetch (name)
    return command and lisp.execute_function (command, prefixarg) or nil"))


(defun eval-buffer (string)
  "Execute the current buffer as Lisp code.
When called from a Lisp program (i.e., not interactively), this
function accepts an optional argument, the BUFFER to evaluate (nil
means use current buffer)."
  (interactive)
  (lambda (&optional buffer)
    "local bp = (buffer and buffer ~= '') and get_buffer (buffer) or cur_bp
    return lisp.eval_string (get_buffer_pre_point (bp) .. get_buffer_post_point (bp))"))


(localvar exprs_history
  "history_new ()")

(defun eval-expression (string)
  "Evaluate EXP and print result in the echo area.
When called interactively, read a ZLisp expression and
evaluate it."
  (interactive)
  (lambda (exp)
    "if not exp then
      exp = minibuf_read ('Eval: ', '', nil, exprs_history)
    end

    lisp.eval_string (exp)

    if exp then
      add_history_element (exprs_history, exp)
    end"))
