;; Key bindings and extended commands
;;
;; Copyright (c) 2010-2014 Free Software Foundation, Inc.
;;
;; This file is part of GNU Zile.
;;
;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.


(localvar bind "require 'zmacs.bind'")


(defsubr self-insert-command (n)
  "Insert the character you type.
Whichever character you type to run this command is inserted."
  (interactive)
    "return execute_with_uniarg (true, current_prefix_arg, self_insert_command)")


(defsubr where-is (definition)
  "Print message listing key sequences that invoke the command DEFINITION.
Argument is a command name."
  (interactive)
    "definition = definition or minibuf_read_function_name ('Where is command: ')

    local bindings = bind.where_is (definition)
    if bindings ~= nil then
      if #bindings == 0 then
        minibuf_echo (definition .. ' is not on any key')
      else
        minibuf_echo (string.format ('%s is on %s',
                                     definition, table.concat (bindings, ', ')))
      end
      return true
    end")


(localfun print_binding (key func)
  "insert_string (string.format ('%-15s %s\n', key, tostring (func)))")


(localfun write_bindings_list (keyx binding)
  "insert_string ('Key translations:\n')
  insert_string (string.format ('%-15s %s\n', 'key', 'binding'))
  insert_string (string.format ('%-15s %s\n', '---', '-------'))

  walk_bindings (root_bindings, print_binding)")


(defsubr describe-bindings ()
  "Show a list of all defined keys, and their definitions."
  (interactive)
    "write_temp_buffer ('*Help*', true, write_bindings_list)
    return true")


(defsubr global-set-key (key command)
  "Bind a COMMAND to a KEY sequence.
Read key sequence and function name, and bind the function to the key
sequence."
  (interactive)
    "local keys = prompt_key_sequence ('Set key globally', key)

    if key == nil then
      key = tostring (keys)
    end

    if not command then
      local name = minibuf_read_function_name (
                     string.format ('Set key %s to command: ', key))
      command = lisp.intern_soft (name)
      if not command then return false end
    end

    if not command then -- Possible if called non-interactively
      return minibuf_error (string.format ([[No such function `%s']], command.name))
    end

    root_bindings[keys] = command
    return true")


(defsubr global-unset-key (key)
  "Remove global binding of KEY.
KEY is a string representing a sequence of keystrokes."
  (interactive)
    "local keys = prompt_key_sequence ('Unset key globally', key)

    if key == nil then
      key = tostring (keys)
    end

    root_bindings[keys] = nil

    return true")


(defsubr universal-argument ()
  "Begin a numeric argument for the following command.
Digits or minus sign following @kbd{C-u} make up the numeric argument.
@kbd{C-u} following the digits or minus sign ends the argument.
@kbd{C-u} without digits or minus sign provides 4 as argument.
Repeating @kbd{C-u} without digits or minus sign multiplies the argument
by 4 each time."
  (interactive)
    "local ok = true

    -- Need to process key used to invoke universal-argument.
    pushkey (lastkey ())

    thisflag.uniarg_empty = true

    local i = 0
    local arg = 1
    local sgn = 1
    local keys = {}
    while true do
      local as = ''
      local key = do_binding_completion (table.concat (keys, ' '))

      -- Cancelled.
      if key == keycode '\\C-g' then
        ok = keyboard_quit ()
        break
      -- Digit pressed.
      elseif key.key < 256 and string.match (string.char (key.key), '%d') then
        local digit = key.key - string.byte ('0')
        thisflag.uniarg_empty = false

        if key.META then
          as = 'ESC '
        end

        as = as .. string.format ('%d', digit)

        if i == 0 then
          arg = digit
        else
          arg = arg * 10 + digit
        end

        i = i + 1
      elseif key == keycode '\\C-u' then
        as = as .. 'C-u'
        if i == 0 then
          arg = arg * 4
        else
          break
        end
      elseif key == keycode '\\M--' and i == 0 then
        if sgn > 0 then
          sgn = -sgn
          as = as .. '-'
          -- The default negative arg is -1, not -4.
          arg = 1
          thisflag.uniarg_empty = false
        end
      else
        ungetkey (key)
        break
      end

      table.insert (keys, as)
    end

    if ok then
      prefix_arg = arg * sgn
      thisflag.set_uniarg = true
      minibuf_clear ()
    end

    return ok")


(defsubr keyboard-quit ()
  "Signal a `quit' condition.
During execution of Lisp code, this character causes a quit directly.
At top-level, as an editor command, this simply beeps."
  (interactive)
  "return keyboard_quit ()")


(defsubr suspend-emacs ()
  "Stop and return to superior process."
  (interactive)
  "return suspend ()")
