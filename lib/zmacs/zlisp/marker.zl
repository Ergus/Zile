;; Marker facility commands.
;;
;; Copyright (c) 2010-2014 Free Software Foundation, Inc.
;;
;; This file is part of GNU Zile.
;;
;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.


(defsubr exchange-point-and-mark ()
  "Put the mark where point is now, and point where the mark is now."
  (interactive)
    "if not cur_bp.mark then
      return minibuf_error ('No mark set in this buffer')
    end

    local tmp = get_buffer_pt (cur_bp)
    goto_offset (cur_bp.mark.o)
    cur_bp.mark.o = tmp
    activate_mark ()
    thisflag.need_resync = true")


(defsubr set-mark ()
  "Set this buffer's mark to point."
    "set_mark ()
    activate_mark ()")


(defsubr set-mark-command ()
  "Set the mark where point is."
  (interactive)
    "lisp.execute_function ('set-mark')
    minibuf_echo ('Mark set')")


(localfun mark (uniarg func)
  "lisp.execute_function ('set-mark')
  local ret = lisp.execute_function (func, uniarg)
  if ret then
    lisp.execute_function ('exchange-point-and-mark')
  end
  return ret")


(defsubr mark-word (arg)
  "Set mark ARG words away from point.
The place mark goes is the same place \\[forward-word] would
move to with the same argument."
  (interactive)
    "return mark (arg, 'forward-word')")


(defsubr mark-sexp (arg)
  "Set mark ARG sexps from point.
The place mark goes is the same place \\[forward-sexp] would
move to with the same argument."
  (interactive)
    "return mark (arg, 'forward-sexp')")


(defsubr mark-paragraph ()
  "Put point at beginning of this paragraph, mark at end.
The paragraph marked is the one that contains point or follows point."
  (interactive)
    "if command.was_labelled ':mark-paragraph' then
      lisp.execute_function ('exchange-point-and-mark')
      lisp.execute_function ('forward-paragraph')
      lisp.execute_function ('exchange-point-and-mark')
    else
      lisp.execute_function ('forward-paragraph')
      lisp.execute_function ('set-mark')
      lisp.execute_function ('backward-paragraph')
    end

    command.attach_label ':mark-paragraph'")


(defsubr mark-whole-buffer ()
  "Put point at beginning and mark at end of buffer."
  (interactive)
    "goto_offset (get_buffer_size (cur_bp) + 1)
    lisp.execute_function ('set-mark-command')
    goto_offset (1)")
