;; Self documentation facility commands.
;;
;; Copyright (c) 2010-2014 Free Software Foundation, Inc.
;;
;; This file is part of GNU Zile.
;;
;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.


;; FIXME: Add apropos

(localvar bind "require 'zmacs.bind'")

(localfun write_function_description (command)
  "insert_string (string.format (
     '%s is %s built-in function in ' .. [[`Lua source code']] .. '.\n\n',
     tostring (command),
     command['interactive-form'] and 'an interactive' or 'a'))

     local bindings = bind.where_is (tostring (command))
     if bindings and #bindings > 0 then
       insert_string (string.format (
         'It is bound to %s.\n\n', table.concat (bindings, ', ')))
     end

     insert_string (command['function-documentation'])")


(defun describe-function (string)
  "Display the full documentation of FUNCTION (a symbol)."
  (interactive)
  (lambda (name)
    "if not name then
      name = minibuf_read_function_name ('Describe function: ')
      if not name then return false end
    end

    local func = lisp.fetch (name)
    if not func or not func['function-documentation'] then return false end

    write_temp_buffer ('*Help*', true, write_function_description, func)
    return true"))


(localfun write_key_description (command binding)
  "insert_string (string.format (
    '%s runs the command %s, which is %s built-in\n' ..
    'function in ' .. [[`Lua source code']] .. '.\n\n%s',
    binding,
    tostring (command),
    command['interactive-form'] and 'an interactive' or 'a',
    command['function-documentation']))")


(defun describe-key (string)
  "Display documentation of the function invoked by KEY."
  (interactive)
  (lambda (key)
    "local command, binding
    if key then
      local keys = keystrtovec (key)
      if not keys then
        return false
      end
      command = get_function_by_keys (keys, lisp.fetch)
      binding = tostring (keys)
    else
      minibuf_write ('Describe key:')
      local keys = get_key_sequence ()
      command = get_function_by_keys (keys, lisp.fetch)
      binding = tostring (keys)

      if not command then
        return minibuf_error (binding .. ' is undefined')
      end
    end

    minibuf_write (string.format ([[%s runs the command `%s']], binding, tostring (command)))
    if not command['function-documentation'] then return false end

    write_temp_buffer ('*Help*', true, write_key_description, command, binding)
    return true"))


(localfun write_variable_description (symbol)
  "insert_string (string.format (
    '%s is a variable defined in ' .. [[`Lua source code']] .. '.\n\n' ..
    'Its value is %s\n\n%s',
    tostring (symbol), symbol.value, symbol['variable-documentation']))")


(defun describe-variable (string)
  "Display the full documentation of VARIABLE (a symbol)."
  (interactive)
  (lambda (name)
    "name = name or minibuf_read_variable_name ('Describe variable: ')
    local symbol = lisp.fetch_variable (name)
    if not symbol or not symbol['variable-documentation'] then return false end
    write_temp_buffer ('*Help*', true, write_variable_description, symbol)
    return true"))


(localfun find_or_create_buffer_from_module (name)
  "local bp = find_buffer (name)
   if bp then
     switch_to_buffer (bp)
   else
     bp = create_auto_buffer (name)
     switch_to_buffer (bp)
     insert_string (require ('zmacs.doc.' .. name))
   end
   cur_bp.readonly = true
   cur_bp.modified = false
  goto_offset (1)")


(defun describe-copying ()
  "Display info on how you may redistribute copies of GNU Zmacs."
  (interactive)
  (lambda ()
    "find_or_create_buffer_from_module ('COPYING')"))


(defun describe-no-warranty ()
  "Display info on all the kinds of warranty Zmacs does NOT have."
  (interactive)
  (lambda ()
    "find_or_create_buffer_from_module ('COPYING')
    lisp.execute_function ('search-forward', ' Disclaimer of Warranty.')
    beginning_of_line ()"))


(defun view-emacs-FAQ ()
  "Display the Zmacs Frequently Asked Questions (FAQ) file."
  (interactive)
  (lambda ()
    "find_or_create_buffer_from_module ('FAQ')"))


(defun view-emacs-news ()
  "Display info on recent changes to Zmacs."
  (interactive)
  (lambda ()
    "find_or_create_buffer_from_module ('NEWS')"))
